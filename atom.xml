<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qingliu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-30T20:51:00.186Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Qingliu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Machine Learning</title>
    <link href="http://yoursite.com/2019/03/29/Machine%20Learning/"/>
    <id>http://yoursite.com/2019/03/29/Machine Learning/</id>
    <published>2019-03-29T20:03:34.000Z</published>
    <updated>2019-03-30T20:51:00.186Z</updated>
    
    <content type="html"><![CDATA[<p>Stanford University, Robotics: Perception</p><p>Course notes</p><a id="more"></a><h1 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h1><p>Facebook, Apple’s photo application.</p><p>Google’s page rank algorithm.</p><p>Email spam filter.</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Algorithms, math and how to get them work.</p><p>Machine Learning:</p><ul><li>Grew out of work in AI</li><li>New capability for computers</li></ul><p>Examples:</p><ul><li>Database mining, E.g., Web click data, medical records, biology, engineering.</li><li>Applications can’t program by hand. Helicopter, handwriting recognition, most of NLP, CV.</li><li>Self-customizing programs: E.g., Amazon, Netflix product recommendations.</li><li>Understanding human learning (brain, real AI).</li></ul><blockquote><p>  Arthur Samuel (1959). Machine Learning: Field of study that gives computers the ability to learn without being explicitly programmed.</p></blockquote><blockquote><p>  Tom Mitchell (1998). Well-posed Learnining Problem: A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</p></blockquote><p>Machine learning algorithms:</p><ul><li>Supervised learning</li><li>Unsupervised learning</li></ul><p>Others: Reinforcement learning, recommender systems.</p><p>Supervised learning</p><hr><p>E.g., housing price prediction (regression)</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-1.png" style="zoom:60%"><br></center><p>E.g., Breast cancer (malignant, benign) (classification)</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-2.png" style="zoom:60%"><br></center><p>Unsupervised learning</p><hr><p>Clustering</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-3.png" style="zoom:60%"><br></center><p>Applications:</p><ul><li>Organize computing clusters</li><li>Social network analysis</li><li>Market segmentation</li><li>Astronomical data analysis</li></ul><p>E.g.</p><p>Cocktail party algorithm</p><h2 id="Linear-Regression-with-One-Variable"><a href="#Linear-Regression-with-One-Variable" class="headerlink" title="Linear Regression with One Variable"></a>Linear Regression with One Variable</h2><h2 id="Linear-Algebra-Review"><a href="#Linear-Algebra-Review" class="headerlink" title="Linear Algebra Review"></a>Linear Algebra Review</h2><h1 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h1><h2 id="Linear-Regression-with-Multiple-Variables"><a href="#Linear-Regression-with-Multiple-Variables" class="headerlink" title="Linear Regression with Multiple Variables"></a>Linear Regression with Multiple Variables</h2><h2 id="Octave-Matlab-Tutorial"><a href="#Octave-Matlab-Tutorial" class="headerlink" title="Octave/Matlab Tutorial"></a>Octave/Matlab Tutorial</h2><h1 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h1><h2 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h2><h2 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h2><h1 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h1><h2 id="Neural-Networks-Representation"><a href="#Neural-Networks-Representation" class="headerlink" title="Neural Networks: Representation"></a>Neural Networks: Representation</h2><h1 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h1><h2 id="Neural-Networks-Learning"><a href="#Neural-Networks-Learning" class="headerlink" title="Neural Networks: Learning"></a>Neural Networks: Learning</h2><h1 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6"></a>Week 6</h1><h2 id="Advice-for-Applying-Machine-Learning"><a href="#Advice-for-Applying-Machine-Learning" class="headerlink" title="Advice for Applying Machine Learning"></a>Advice for Applying Machine Learning</h2><h2 id="Machine-Learning-System-Design"><a href="#Machine-Learning-System-Design" class="headerlink" title="Machine Learning System Design"></a>Machine Learning System Design</h2><h1 id="Week-7"><a href="#Week-7" class="headerlink" title="Week 7"></a>Week 7</h1><h2 id="Support-Vector-Machines"><a href="#Support-Vector-Machines" class="headerlink" title="Support Vector Machines"></a>Support Vector Machines</h2><h1 id="Week-8"><a href="#Week-8" class="headerlink" title="Week 8"></a>Week 8</h1><h2 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h2><h2 id="Dimensionality-Reduction"><a href="#Dimensionality-Reduction" class="headerlink" title="Dimensionality Reduction"></a>Dimensionality Reduction</h2><h1 id="Week-9"><a href="#Week-9" class="headerlink" title="Week 9"></a>Week 9</h1><h2 id="Anomaly-Detection"><a href="#Anomaly-Detection" class="headerlink" title="Anomaly Detection"></a>Anomaly Detection</h2><h2 id="Recommender-Systems"><a href="#Recommender-Systems" class="headerlink" title="Recommender Systems"></a>Recommender Systems</h2><h1 id="Week-10"><a href="#Week-10" class="headerlink" title="Week 10"></a>Week 10</h1><h2 id="Large-Scale-Machine-Learning"><a href="#Large-Scale-Machine-Learning" class="headerlink" title="Large Scale Machine Learning"></a>Large Scale Machine Learning</h2><h1 id="Week-11"><a href="#Week-11" class="headerlink" title="Week 11"></a>Week 11</h1><h2 id="Application-Example-Photo-OCR"><a href="#Application-Example-Photo-OCR" class="headerlink" title="Application Example: Photo OCR"></a>Application Example: Photo OCR</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Stanford University, Robotics: Perception&lt;/p&gt;
&lt;p&gt;Course notes&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="Programming" scheme="http://yoursite.com/tags/Programming/"/>
    
      <category term="Matlab" scheme="http://yoursite.com/tags/Matlab/"/>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Robotics: Perception</title>
    <link href="http://yoursite.com/2019/03/26/Robotics-Perception/"/>
    <id>http://yoursite.com/2019/03/26/Robotics-Perception/</id>
    <published>2019-03-27T00:30:34.000Z</published>
    <updated>2019-03-30T20:51:48.334Z</updated>
    
    <content type="html"><![CDATA[<p>University of Pennsylvania, Robotics: Perception</p><p>Course notes</p><a id="more"></a><p>Cover:</p><ul><li>Geometry of Image Formation</li><li>Projective Transformations</li><li>Pose Estimation</li><li>Multi-View Geometry</li></ul><p>Learning Purpose: </p><ul><li>To be a candidate.</li><li>Self promotion.</li><li>Be familiar with Matlab again.</li></ul><p>Matlab help Videos are all from <a href="https://www.youtube.com/" target="_blank" rel="noopener">Youtube</a></p><h1 id="Week-1-Geometry-of-Image-Formation"><a href="#Week-1-Geometry-of-Image-Formation" class="headerlink" title="Week 1, Geometry of Image Formation"></a>Week 1, Geometry of Image Formation</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ul><li>Projection center</li><li>Augmented reality</li><li>Where am I?</li></ul><h2 id="Camera-Modeling"><a href="#Camera-Modeling" class="headerlink" title="Camera Modeling"></a>Camera Modeling</h2><p>Gannet: Estimate distance from water.</p><p>Camera: imaging chip and a lens</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1ixautiffj31050ho118.jpg" style="zoom:60%"><br></center><p>$\frac 1f =  \frac 1a + \frac 1b$</p><p>blured picture (when we change the image plane by sticking on the mannual mode of the camera)</p><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1ixksq1fij30zh0hcdlk.jpg" style="zoom:60%"><br></center><ul><li>A point object of the same size coming closer results on a larger image.</li><li>A point moving on the same ray does not change its image. (regarding to fixed image plane)</li></ul><h2 id="Single-View-Geometry"><a href="#Single-View-Geometry" class="headerlink" title="Single View Geometry"></a>Single View Geometry</h2><p>World Coordinates: x, y, z locations.</p><p>Camera Coordinates: Two dimensional plane.</p><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1jawb2m00j30rn0httuj.jpg" style="zoom:60%"><br></center><p>Given the picture, how tall is the person in the picture?</p><p>“Single View Metrology”, ICCV 1999, CVPR 1998</p><p>Ideas 1: Measurements on planes. Moving “not vertical” to “vertical” and then measure.</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jazxsamij30v70frk63.jpg" style="zoom:60%"><br></center><p>Ideas 2: Vanishing points.</p><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1jb2872qmj312n0cf7gm.jpg" style="zoom:60%"><br></center><p>Phical lines in the real world which are parallel will meet at the vanishing point when approaching infinity.</p><h2 id="More-on-Perspective-Projection"><a href="#More-on-Perspective-Projection" class="headerlink" title="More on Perspective Projection"></a>More on Perspective Projection</h2><p>Perspectography.</p><p>Strategy for projecting $P^*$ to $P$ on the same plane rather than on the image plane.</p><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1jbmbnrxyj30rs0efwjf.jpg" style="zoom:60%"><br></center><h2 id="Quiz-Introduction"><a href="#Quiz-Introduction" class="headerlink" title="Quiz: Introduction"></a>Quiz: Introduction</h2><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1jbxs8z4tj30hg0xs0v7.jpg" style="zoom:60%"><br></center><h2 id="Glimpse-on-Vanishing-Points"><a href="#Glimpse-on-Vanishing-Points" class="headerlink" title="Glimpse on Vanishing Points"></a>Glimpse on Vanishing Points</h2><p>Vanishing points</p><hr><p>Properties:</p><ul><li>Any two parallel lines have the same vanishing point.</li><li>The ray from C throught v point is parallel to the lines.</li><li>An image may have more than one vanishing point.</li></ul><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jcjkxk8zj30k109fwgc.jpg" style="zoom:60%"><br></center><p>A single point can form a line between the optical center and that point, the ray can represent all the physical lines out there which are parallel.</p><p>Multiple Vanishing Points:</p><p>For every direction we have on the ground plane, there is a unique point in the image space. All the vanishing points will form a horizon.</p><ul><li>Any set of parallel lines on the plane define a vanishing point.</li><li>The union of all of these vanishing points is the horizon line (also called vanishing line)</li><li>Different planes define different vanishing lines.</li></ul><p>Computing vanishing lines:</p><ul><li>I is intersection of horizontal plane through C with image plane.</li><li>Compute I from two sets of parallel lines on ground plane.</li><li>All points at same height as C project to I.</li><li>Provided way of comaring height of objects in the scene.</li></ul><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jcu72jdpj30f809tdi5.jpg" style="zoom:60%"><br></center><p>Measuring height:</p><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1jcz65661j30vg0gatj6.jpg" style="zoom:60%"><br></center><p>Trace a line from the bottom of the ruler throught feet of the person to infinity (intersect with the horizon).</p><h2 id="Quiz-Vanishing-Points"><a href="#Quiz-Vanishing-Points" class="headerlink" title="Quiz: Vanishing Points"></a>Quiz: Vanishing Points</h2><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1jggbshiuj30au0ytds5.jpg" style="zoom:60%"><br></center><h2 id="Perspective-Projection-I"><a href="#Perspective-Projection-I" class="headerlink" title="Perspective Projection I"></a>Perspective Projection I</h2><p>One-Point Perspective</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jgiybsamj30qf0jqnjg.jpg" style="zoom:60%"><br></center><p>Partial review.</p><p>Not all pictures should have the same vanishing points.</p><p>The projective plane:</p><ul><li>Represent points at infinity, homographies, perspective projection, multi-view relationships.</li><li>A point in the image is a ray in projective space.</li></ul><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1jgvo6y0kj30cg07w0ue.jpg" style="zoom:60%"><br></center><p>$$<br>\begin{bmatrix}<br>x \\<br>y \\<br>\end{bmatrix}<br>-homogeneous coords-&gt;<br>\begin{bmatrix}<br>x \\<br>y \\<br>1 \\<br>\end{bmatrix}<br>$$<br>Projective lines</p><p>Eg:</p><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1jhfkz7i1j30nx0h3e12.jpg" style="zoom:60%"><br></center><p>a, b and c are parameters in the 3D space but also related to the equation of the line.</p><p>3D plane equation:<br>$$<br>ax + by + cz = 0<br>$$</p><h2 id="Perspective-Projection-II"><a href="#Perspective-Projection-II" class="headerlink" title="Perspective Projection II"></a>Perspective Projection II</h2><p>Define a line: we use two points on the line to define it:</p><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1jj068t8sj30sa0khgrx.jpg" style="zoom:60%"><br></center><p>We have:<br>$$<br>x\cdot l = 0  ,\space x’\cdot l = 0<br>$$<br>So $l$  is the surface normal vector of the orange plane, which is coresponding to the line on the plane $P_1P_2$ . (Please think that points on the line can be represented as $(x,y,1)$, then it’s easy to understand)</p><p>Reference materials of projective view:</p><p>surface normal: a unit vector at a given point of a surface which is perpendicular to the tangent plane.</p><p>Intersection of lines:</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jjr4ft8pj30pk0m8jxa.jpg" style="zoom:60%"><br></center><p><strong>Mistake in this video at arround 8:30.</strong></p><h2 id="Point-Line-Duality"><a href="#Point-Line-Duality" class="headerlink" title="Point-Line Duality"></a>Point-Line Duality</h2><p>When P has the form $(x,y,0)$:</p><p>We convert a 3D point into a 2D point by dividing the last element out. (Homogeous coords)</p><p>Some intuitions: $x/0 -&gt; infinity$. So very likely it’s a vanishing point.</p><p>Point at infinity:</p><p>Eg:</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jkecg0hyj30oq0fnq6u.jpg" style="zoom:60%"><br></center><p>More general of intersection of parallel lines:</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1jkgb5rb1j30tr0kp799.jpg" style="zoom:60%"><br></center><p>All parallel lines intersects at the point at infinity:<br>$$<br>line \space l = (a,b,c)^T \space intersects \space at \space (b,-a,0)^T<br>$$</p><p>Line at infinity (a line passing all points at infinity) :<br>$$<br>l_\infty=(0,0,1)^T<br>$$<br>Because:<br>$$<br>\begin {bmatrix}<br>0\<br>0\<br>1<br>\end {bmatrix}<br>\begin {bmatrix}<br>x_1 \\<br>x_2 \\<br>0<br>\end {bmatrix}<br>= 0<br>$$</p><p>Ideal points and lines (noting that there are two coords system, one for real space which is 3D, one for image space which is 2D):</p><ul><li>Ideal point (“point at infinity”)<ul><li>$p = (x,y,0)​$ — parallel to image plane</li><li>It has ifinite image coordinates (2D coordinates for point)</li></ul></li><li>Ideal line<ul><li>$l = (a,b,0)$ — parallel to image plane</li><li>Corresponds to a line in the image (finite coordinates)</li></ul></li></ul><h2 id="Quiz-Perspective-Projection"><a href="#Quiz-Perspective-Projection" class="headerlink" title="Quiz: Perspective Projection"></a>Quiz: Perspective Projection</h2><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1jmpa8tatj30k210tn07.jpg" style="zoom:60%"><br></center><h2 id="Rotations-and-Translations"><a href="#Rotations-and-Translations" class="headerlink" title="Rotations and Translations"></a>Rotations and Translations</h2><p>Transformation between camera and world coordinates systems</p><hr><p>Convention: Red for X, Green for Y and Blue for Z.<br>$$<br>^cP = ^cR_w \space^wP+^cT_w<br>$$<br>Point P can be expressed with respect to “w” or “c” coordinate frames.</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-29-Week1-18.png" style="zoom:60%"><br></center><p>If we set $^wP$ to zero, then, $^cP=^cR_w+^cT_w$ is the vector from camera origin to world origin.<br>$$<br>^cR_w=(r_1 \ r_2 \ r_3)<br>$$<br>Set $^wP=(1,0,0)$ and imagine $^cT_w=0$. Then $^cP = r_1 $ whch means that <strong>the rotation columns are the world axis expressed in the camera coordinate system</strong>.</p><p>Eg:</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-29-Week1-19.png" style="zoom:60%"><br></center><p>The translation is easy from the picture:<br>$$<br>\begin {pmatrix}<br>0 \\<br>5 \\<br>10<br>\end {pmatrix}<br>$$<br>We have to make sure that the 3x3 matrix is a rotation matrix, which means $R^TR=I$ and det(R) = 1.</p><p>Transform between coordinate systems of three:</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-29-Week1-20.png" style="zoom:60%"><br></center><p>Inverse:</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-29-Week1-21.png" style="zoom:60%"><br></center><h2 id="Quiz-Rotations-and-Translations"><a href="#Quiz-Rotations-and-Translations" class="headerlink" title="Quiz: Rotations and Translations"></a>Quiz: Rotations and Translations</h2><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-29-Week1-22.png" style="zoom:60%"><br></center><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-29-Week1-23.png" style="zoom:60%"><br></center><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-29-Week1-24.png" style="zoom:60%"><br></center><h2 id="Pinhole-Camera-Model"><a href="#Pinhole-Camera-Model" class="headerlink" title="Pinhole Camera Model"></a>Pinhole Camera Model</h2><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-25.png" style="zoom:60%"><br></center><p>Pinhole Camera:</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-26.png" style="zoom:60%"><br></center><p>$1^{st}$ Person Camera world</p><hr><p>3D to 2D image:<br>$$<br>x’=f\frac X Z \ y’=f\frac Y Z<br>$$</p><h2 id="Focal-Length-and-Dolly-Zoom-Effect"><a href="#Focal-Length-and-Dolly-Zoom-Effect" class="headerlink" title="Focal Length and Dolly Zoom Effect"></a>Focal Length and Dolly Zoom Effect</h2><p>Focal length</p><p>Process of changing focal length: zooming</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-27.png" style="zoom:60%"><br></center><p>Focal length longer: field of view narrow</p><h2 id="Intrinsic-Camera-a-Parameter"><a href="#Intrinsic-Camera-a-Parameter" class="headerlink" title="Intrinsic Camera a Parameter"></a>Intrinsic Camera a Parameter</h2><p>3D to 2D image:<br>$$<br>x’=f\frac X Z \ y’=f\frac Y Z<br>$$</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-28.png" style="zoom:60%"><br></center><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-29.png" style="zoom:60%"><br></center><p>$$<br>x=P_0X<br>$$</p><p>$P_0$ is the camera projection matrix</p><p>Conversion from mm to pixels</p><p>Optical center on the image plane: Principal point</p><p>What we do is shifting and scaling by the measurement of pixels:</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-30.png" style="zoom:60%"><br></center><p>Map camera coordinate to pixel coordinate (matrix form):</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-31.png" style="zoom:60%"><br></center><p>$Px,P_y$ is the principle point (where optical axis hits image plane) (not exactly the center of the image)</p><p>s is the slant factor, when the image plane is not normal to the optical axis</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-32.png" style="zoom:60%"><br></center><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-33.png" style="zoom:60%"><br></center><p>Three factors:</p><ul><li>A scale factor that converts physical focal length to pixel unit.</li><li>Position of image center (principal point).</li><li>A skew factor between x and y axis of the image.</li></ul><h2 id="3D-World-to-First-Person-Transformation"><a href="#3D-World-to-First-Person-Transformation" class="headerlink" title="3D World to First Person Transformation"></a>3D World to First Person Transformation</h2><p>Multiple View Geometry</p><p>$3^{rd}$ person view measurement</p><p>Why: When we are moving around to see different objects from different point of view, which means  that the origin is always changing.</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-34.png" style="zoom:60%"><br></center><p>Convert the 3D representation into first person coordinate.</p><p>Every camera has its own first person coordinate system.</p><ol><li>Translate the world coordinate into the camera coordiante</li><li>Translate the camera coordinate into the pixel coordinate</li></ol><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-35.png" style="zoom:60%"><br></center><p>Combining them together, we get:<br>$$<br>x=K[R,t]X<br>$$<br>Comlete form:</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-36.png" style="zoom:60%"><br></center><p>$$<br>3D \space from \space 3^{rd} \space person –&gt;3D \space from \space 1^{rd} \space person –&gt;2D \space pixel \space domain<br>$$</p><p>Special cases</p><hr><p>Plnar objects: all x,y,z sits in a plane</p><p>We have freedom to choose how we measure 3D points from $3^{rd}$ person view.</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-37.png" style="zoom:60%"><br></center><p>Rotating camera: known optical center</p><p>panorama</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-38.png" style="zoom:60%"><br></center><h2 id="Quiz-Dolly-Zoom"><a href="#Quiz-Dolly-Zoom" class="headerlink" title="Quiz: Dolly Zoom"></a>Quiz: Dolly Zoom</h2><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-39.png" style="zoom:60%"><br></center><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-40.png" style="zoom:60%"><br></center><h2 id="Quiz-Feeling-of-Camera-Motion"><a href="#Quiz-Feeling-of-Camera-Motion" class="headerlink" title="Quiz: Feeling of Camera Motion"></a>Quiz: Feeling of Camera Motion</h2><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-41.png" style="zoom:60%"><br></center><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-42.png" style="zoom:60%"><br></center><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-43.png" style="zoom:60%"><br></center><h2 id="How-to-Compute-Intrinsics-from-Vanishing-Points"><a href="#How-to-Compute-Intrinsics-from-Vanishing-Points" class="headerlink" title="How to Compute Intrinsics from Vanishing Points"></a>How to Compute Intrinsics from Vanishing Points</h2><p>Compute focal length and image center from pure geometry without using projection equations.</p><p>Eg: Three orthogonal sets of parallel lines create three orthogonal vanishing points.</p><center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-44.png" style="zoom:60%"><br></center><p>What does the horizon between A and B tells us about the camera?</p><p>It gives us information about how the horizon is oriented with respect to the camera.</p><p>Because the camera is tilted, point C is not on the horizon.</p><p>Just knowledge of A and B doesn’t determine C. We need also the focal length and the image center in order to fix C.</p><p>Later for how to compute:</p> <center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-45.png" style="zoom:60%"><br></center><p>H is the orthocenter of ABC</p><p>Focal length computation, easy as following:</p> <center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-46.png" style="zoom:60%"><br></center><p>So f can be determined from $d_1$, $d_2$ and $d_3$, which are all known.</p><h2 id="Quiz-How-to-Compute-Intrinsics-from-Vanishing-Points"><a href="#Quiz-How-to-Compute-Intrinsics-from-Vanishing-Points" class="headerlink" title="Quiz: How to Compute Intrinsics from Vanishing Points"></a>Quiz: How to Compute Intrinsics from Vanishing Points</h2> <center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-47.png" style="zoom:60%"><br></center><h2 id="Camera-Calibration"><a href="#Camera-Calibration" class="headerlink" title="Camera Calibration"></a>Camera Calibration</h2> <center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-49.png" style="zoom:60%"><br></center><p>Cameras with large field of view have radial distortions.</p> <center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-48.png" style="zoom:60%"><br></center><p>A procedure called calibration (Estimates the intrinsic parameters)</p><ul><li>f focal length</li><li>($u_0$,$v_0$) image center</li><li>$k_1,k_2,…$ radial distortion parameters</li></ul><p>Matlab has calibration toolbox.</p><h2 id="Quiz-Camera-Calibration"><a href="#Quiz-Camera-Calibration" class="headerlink" title="Quiz: Camera Calibration"></a>Quiz: Camera Calibration</h2> <center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-50.png" style="zoom:60%"><br></center> <center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-51.png" style="zoom:60%"><br></center> <center><br><img src="https://azure-pictures.s3.amazonaws.com/blog/2019-03-30-Week1-53.png" style="zoom:60%"><br></center><h2 id="Programming-Assignment-Dolly-Zoom"><a href="#Programming-Assignment-Dolly-Zoom" class="headerlink" title="Programming Assignment: Dolly Zoom"></a>Programming Assignment: Dolly Zoom</h2><p><a href="https://github.com/Aden-Q/Dolly-Zoom" target="_blank" rel="noopener">Dolly Zoom</a></p><h1 id="Week-2-Projective-Transformations"><a href="#Week-2-Projective-Transformations" class="headerlink" title="Week 2, Projective Transformations"></a>Week 2, Projective Transformations</h1><h2 id="Vanishing-Points-How-to-Compute-Camera-Orientation"><a href="#Vanishing-Points-How-to-Compute-Camera-Orientation" class="headerlink" title="Vanishing Points; How to Compute Camera Orientation"></a>Vanishing Points; How to Compute Camera Orientation</h2><h2 id="Quiz-Homogeneous-Coordinates"><a href="#Quiz-Homogeneous-Coordinates" class="headerlink" title="Quiz: Homogeneous Coordinates"></a>Quiz: Homogeneous Coordinates</h2><h2 id="Compute-Projective-Transformations"><a href="#Compute-Projective-Transformations" class="headerlink" title="Compute Projective Transformations"></a>Compute Projective Transformations</h2><h2 id="Quiz-Projective-Transformations"><a href="#Quiz-Projective-Transformations" class="headerlink" title="Quiz: Projective Transformations"></a>Quiz: Projective Transformations</h2><h2 id="Projective-Transformations-and-Vanishing-Points"><a href="#Projective-Transformations-and-Vanishing-Points" class="headerlink" title="Projective Transformations and Vanishing Points"></a>Projective Transformations and Vanishing Points</h2><h2 id="Quiz-Vanishing-Points-1"><a href="#Quiz-Vanishing-Points-1" class="headerlink" title="Quiz: Vanishing Points"></a>Quiz: Vanishing Points</h2><h2 id="Cross-Ratios-and-Single-View-Metrology"><a href="#Cross-Ratios-and-Single-View-Metrology" class="headerlink" title="Cross Ratios and Single View Metrology"></a>Cross Ratios and Single View Metrology</h2><h2 id="Quiz-Cross-Ratios-and-Single-View-Metrology"><a href="#Quiz-Cross-Ratios-and-Single-View-Metrology" class="headerlink" title="Quiz: Cross Ratios and Single View Metrology"></a>Quiz: Cross Ratios and Single View Metrology</h2><h2 id="Two-View-Soccer-Metrology"><a href="#Two-View-Soccer-Metrology" class="headerlink" title="Two View Soccer Metrology"></a>Two View Soccer Metrology</h2><h2 id="Programming-Assignment-Image-Projection-using-Homographies"><a href="#Programming-Assignment-Image-Projection-using-Homographies" class="headerlink" title="Programming Assignment: Image Projection using Homographies"></a>Programming Assignment: Image Projection using Homographies</h2><h1 id="Week-3-Pose-Estimation"><a href="#Week-3-Pose-Estimation" class="headerlink" title="Week 3, Pose Estimation"></a>Week 3, Pose Estimation</h1><h2 id="Visual-Features"><a href="#Visual-Features" class="headerlink" title="Visual Features"></a>Visual Features</h2><h2 id="Quiz-Visual-Features"><a href="#Quiz-Visual-Features" class="headerlink" title="Quiz: Visual Features"></a>Quiz: Visual Features</h2><h2 id="Singular-Value-Decomposition"><a href="#Singular-Value-Decomposition" class="headerlink" title="Singular Value Decomposition"></a>Singular Value Decomposition</h2><h2 id="Quiz-Singular-Value-Decomposition"><a href="#Quiz-Singular-Value-Decomposition" class="headerlink" title="Quiz: Singular Value Decomposition"></a>Quiz: Singular Value Decomposition</h2><h2 id="RANSAC-Random-Sample-Consensus-I"><a href="#RANSAC-Random-Sample-Consensus-I" class="headerlink" title="RANSAC: Random Sample Consensus I"></a>RANSAC: Random Sample Consensus I</h2><h2 id="Quiz-RANSAC"><a href="#Quiz-RANSAC" class="headerlink" title="Quiz: RANSAC"></a>Quiz: RANSAC</h2><h2 id="Where-am-I-Part-1"><a href="#Where-am-I-Part-1" class="headerlink" title="Where am I? Part 1"></a>Where am I? Part 1</h2><h2 id="Where-am-I-Part-2"><a href="#Where-am-I-Part-2" class="headerlink" title="Where am I? Part 2"></a>Where am I? Part 2</h2><h2 id="Pose-from-3D-Point-Correspondences-The-Procrustes-Problem"><a href="#Pose-from-3D-Point-Correspondences-The-Procrustes-Problem" class="headerlink" title="Pose from 3D Point Correspondences: The Procrustes Problem"></a>Pose from 3D Point Correspondences: The Procrustes Problem</h2><h2 id="Quiz-3D-3D-Pose"><a href="#Quiz-3D-3D-Pose" class="headerlink" title="Quiz: 3D-3D Pose"></a>Quiz: 3D-3D Pose</h2><h2 id="Pose-from-Projective-Transformations"><a href="#Pose-from-Projective-Transformations" class="headerlink" title="Pose from Projective Transformations"></a>Pose from Projective Transformations</h2><h2 id="Pose-from-Point-Correspondences-P3P"><a href="#Pose-from-Point-Correspondences-P3P" class="headerlink" title="Pose from Point Correspondences P3P"></a>Pose from Point Correspondences P3P</h2><h2 id="Quiz-Pose-Estimation"><a href="#Quiz-Pose-Estimation" class="headerlink" title="Quiz: Pose Estimation"></a>Quiz: Pose Estimation</h2><h2 id="Programming-Assignment-Image-Projection"><a href="#Programming-Assignment-Image-Projection" class="headerlink" title="Programming Assignment: Image Projection"></a>Programming Assignment: Image Projection</h2><h1 id="Week-4-Multi-View-Geometry"><a href="#Week-4-Multi-View-Geometry" class="headerlink" title="Week 4, Multi-View Geometry"></a>Week 4, Multi-View Geometry</h1><h2 id="Epipolar-Geometry-I"><a href="#Epipolar-Geometry-I" class="headerlink" title="Epipolar Geometry I"></a>Epipolar Geometry I</h2><h2 id="Epipolar-Geometry-II"><a href="#Epipolar-Geometry-II" class="headerlink" title="Epipolar Geometry II"></a>Epipolar Geometry II</h2><h2 id="Epipolar-Geometry-III"><a href="#Epipolar-Geometry-III" class="headerlink" title="Epipolar Geometry III"></a>Epipolar Geometry III</h2><h2 id="Quiz-Epipolar-Geometry"><a href="#Quiz-Epipolar-Geometry" class="headerlink" title="Quiz: Epipolar Geometry"></a>Quiz: Epipolar Geometry</h2><h2 id="RANSAC-Random-Sample-Consensus-II"><a href="#RANSAC-Random-Sample-Consensus-II" class="headerlink" title="RANSAC: Random Sample Consensus II"></a>RANSAC: Random Sample Consensus II</h2><h2 id="Nonlinear-Least-Squares-I"><a href="#Nonlinear-Least-Squares-I" class="headerlink" title="Nonlinear Least Squares I"></a>Nonlinear Least Squares I</h2><h2 id="Nonlinear-Least-Squares-II"><a href="#Nonlinear-Least-Squares-II" class="headerlink" title="Nonlinear  Least Squares II"></a>Nonlinear  Least Squares II</h2><h2 id="Nonlinear-Least-Squares-III"><a href="#Nonlinear-Least-Squares-III" class="headerlink" title="Nonlinear Least Squares III"></a>Nonlinear Least Squares III</h2><h2 id="Quiz-Nonlinear-Least-Squares"><a href="#Quiz-Nonlinear-Least-Squares" class="headerlink" title="Quiz: Nonlinear Least Squares"></a>Quiz: Nonlinear Least Squares</h2><h2 id="Optical-Flow-2D-Point-Correspondences"><a href="#Optical-Flow-2D-Point-Correspondences" class="headerlink" title="Optical Flow: 2D Point Correspondences"></a>Optical Flow: 2D Point Correspondences</h2><h2 id="3D-Velocities-from-Optical-Flow"><a href="#3D-Velocities-from-Optical-Flow" class="headerlink" title="3D Velocities from Optical Flow"></a>3D Velocities from Optical Flow</h2><h2 id="Quiz-3D-Velocities-from-Optical-Flow"><a href="#Quiz-3D-Velocities-from-Optical-Flow" class="headerlink" title="Quiz: 3D Velocities from Optical Flow"></a>Quiz: 3D Velocities from Optical Flow</h2><h2 id="3D-Motion-and-Structure-from-Multiple-Views"><a href="#3D-Motion-and-Structure-from-Multiple-Views" class="headerlink" title="3D Motion and Structure from Multiple Views"></a>3D Motion and Structure from Multiple Views</h2><h2 id="Visual-Odometry"><a href="#Visual-Odometry" class="headerlink" title="Visual Odometry"></a>Visual Odometry</h2><h2 id="Bundle-Adjustment-I"><a href="#Bundle-Adjustment-I" class="headerlink" title="Bundle Adjustment I"></a>Bundle Adjustment I</h2><h2 id="Bundle-Adjustment-II"><a href="#Bundle-Adjustment-II" class="headerlink" title="Bundle Adjustment II"></a>Bundle Adjustment II</h2><h2 id="Bundle-Adjustment-III"><a href="#Bundle-Adjustment-III" class="headerlink" title="Bundle Adjustment III"></a>Bundle Adjustment III</h2><h2 id="Quiz-Bundle-Adjustment"><a href="#Quiz-Bundle-Adjustment" class="headerlink" title="Quiz: Bundle Adjustment"></a>Quiz: Bundle Adjustment</h2><h2 id="Programming-Assignment-Structure-from-Motion"><a href="#Programming-Assignment-Structure-from-Motion" class="headerlink" title="Programming Assignment: Structure from Motion"></a>Programming Assignment: Structure from Motion</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;University of Pennsylvania, Robotics: Perception&lt;/p&gt;
&lt;p&gt;Course notes&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="Programming" scheme="http://yoursite.com/tags/Programming/"/>
    
      <category term="Matlab" scheme="http://yoursite.com/tags/Matlab/"/>
    
      <category term="Robotics" scheme="http://yoursite.com/tags/Robotics/"/>
    
  </entry>
  
  <entry>
    <title>MathJax Formula</title>
    <link href="http://yoursite.com/2019/03/23/MathJax%20Formula/"/>
    <id>http://yoursite.com/2019/03/23/MathJax Formula/</id>
    <published>2019-03-23T22:48:34.000Z</published>
    <updated>2019-03-29T06:12:38.697Z</updated>
    
    <content type="html"><![CDATA[<p>MathJax Formula memo.</p><a id="more"></a><blockquote><p>  MathJax is an open-source JavaScript display engine for Latex, MathML, and AsciiMath notation that works in all modern browsers.</p></blockquote><p>Two modes:</p><ul><li>Inline: embedded into text.</li><li>Displayed: displayed individually.</li></ul><h1 id="Greek-alphabet"><a href="#Greek-alphabet" class="headerlink" title="Greek alphabet"></a>Greek alphabet</h1><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Upper</th><th style="text-align:center">Tex</th><th style="text-align:center">Lower</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">alpha</td><td style="text-align:center">$A$</td><td style="text-align:center">A</td><td style="text-align:center">$\alpha$</td><td style="text-align:center">\alpha</td></tr><tr><td style="text-align:center">beta</td><td style="text-align:center">$B$</td><td style="text-align:center">B</td><td style="text-align:center">$\beta$</td><td style="text-align:center">\beta</td></tr><tr><td style="text-align:center">gamma</td><td style="text-align:center">$\Gamma$</td><td style="text-align:center">\Gamma</td><td style="text-align:center">$\gamma$</td><td style="text-align:center">\gamma</td></tr><tr><td style="text-align:center">delta</td><td style="text-align:center">$\Delta$</td><td style="text-align:center">\Delta</td><td style="text-align:center">$\delta$</td><td style="text-align:center">\delta</td></tr><tr><td style="text-align:center">epsilon</td><td style="text-align:center">$E$</td><td style="text-align:center">E</td><td style="text-align:center">$\epsilon$</td><td style="text-align:center">\epsilon</td></tr><tr><td style="text-align:center">zeta</td><td style="text-align:center">$Z$</td><td style="text-align:center">Z</td><td style="text-align:center">$\zeta$</td><td style="text-align:center">\zeta</td></tr><tr><td style="text-align:center">eta</td><td style="text-align:center">$H$</td><td style="text-align:center">H</td><td style="text-align:center">$\eta$</td><td style="text-align:center">\eta</td></tr><tr><td style="text-align:center">theta</td><td style="text-align:center">$\Theta$</td><td style="text-align:center">\Theta</td><td style="text-align:center">$\theta$</td><td style="text-align:center">\theta</td></tr><tr><td style="text-align:center">iota</td><td style="text-align:center">$I$</td><td style="text-align:center">I</td><td style="text-align:center">$\iota$</td><td style="text-align:center">\iota</td></tr><tr><td style="text-align:center">kappa</td><td style="text-align:center">$K$</td><td style="text-align:center">K</td><td style="text-align:center">$\kappa$</td><td style="text-align:center">\kappa</td></tr><tr><td style="text-align:center">lambda</td><td style="text-align:center">$\Lambda$</td><td style="text-align:center">\Lambda</td><td style="text-align:center">$\lambda$</td><td style="text-align:center">\lambda</td></tr><tr><td style="text-align:center">mu</td><td style="text-align:center">$M$</td><td style="text-align:center">M</td><td style="text-align:center">$\mu$</td><td style="text-align:center">\mu</td></tr><tr><td style="text-align:center">nu</td><td style="text-align:center">$N$</td><td style="text-align:center">N</td><td style="text-align:center">$\nu$</td><td style="text-align:center">\nu</td></tr><tr><td style="text-align:center">xi</td><td style="text-align:center">$\Xi$</td><td style="text-align:center">\Xi</td><td style="text-align:center">$\xi$</td><td style="text-align:center">\xi</td></tr><tr><td style="text-align:center">omicron</td><td style="text-align:center">$O$</td><td style="text-align:center">O</td><td style="text-align:center">$\omicron$</td><td style="text-align:center">\omicron</td></tr><tr><td style="text-align:center">pi</td><td style="text-align:center">$\Pi$</td><td style="text-align:center">\Pi</td><td style="text-align:center">$\pi$</td><td style="text-align:center">\pi</td></tr><tr><td style="text-align:center">rho</td><td style="text-align:center">$P$</td><td style="text-align:center">P</td><td style="text-align:center">$\rho$</td><td style="text-align:center">\rho</td></tr><tr><td style="text-align:center">sigma</td><td style="text-align:center">$\Sigma$</td><td style="text-align:center">\Sigma</td><td style="text-align:center">$\sigma$</td><td style="text-align:center">\sigma</td></tr><tr><td style="text-align:center">tau</td><td style="text-align:center">$T$</td><td style="text-align:center">T</td><td style="text-align:center">$\tau$</td><td style="text-align:center">\tau</td></tr><tr><td style="text-align:center">upsilon</td><td style="text-align:center">$\Upsilon$</td><td style="text-align:center">\Upsilon</td><td style="text-align:center">$\upsilon$</td><td style="text-align:center">\upsilon</td></tr><tr><td style="text-align:center">phi</td><td style="text-align:center">$\Phi$</td><td style="text-align:center">\Phi</td><td style="text-align:center">$\phi$</td><td style="text-align:center">\phi</td></tr><tr><td style="text-align:center">chi</td><td style="text-align:center">$X$</td><td style="text-align:center">X</td><td style="text-align:center">$\chi$</td><td style="text-align:center">\chi</td></tr><tr><td style="text-align:center">psi</td><td style="text-align:center">$\Psi$</td><td style="text-align:center">\Psi</td><td style="text-align:center">$\psi$</td><td style="text-align:center">\psi</td></tr><tr><td style="text-align:center">omega</td><td style="text-align:center">$\Omega$</td><td style="text-align:center">\Omega</td><td style="text-align:center">$\omega$</td><td style="text-align:center">\omega</td></tr></tbody></table><h1 id="Superscript-and-Subscript"><a href="#Superscript-and-Subscript" class="headerlink" title="Superscript and Subscript"></a>Superscript and Subscript</h1><p>Group the notation by curly bracket “{}”, other wise, the script only count for the one consecutive letter.</p><table><thead><tr><th style="text-align:center">Text</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">$x^{2}$</td><td style="text-align:center">x^{2}</td></tr><tr><td style="text-align:center">$x_0$</td><td style="text-align:center">x_0</td></tr><tr><td style="text-align:center">$\hat x$</td><td style="text-align:center">\hat x</td></tr><tr><td style="text-align:center">$\widehat {xy} $</td><td style="text-align:center">\widehat {xy}</td></tr><tr><td style="text-align:center">$\hat {xy} $</td><td style="text-align:center">\hat {xy}</td></tr><tr><td style="text-align:center">$\overline {xyz}$</td><td style="text-align:center">\overline {xyz}</td></tr><tr><td style="text-align:center">$\vec x$</td><td style="text-align:center">\vec x</td></tr><tr><td style="text-align:center">$\dot x$</td><td style="text-align:center">\dot x</td></tr><tr><td style="text-align:center">$\ddot x$</td><td style="text-align:center">\ddot x</td></tr></tbody></table><h1 id="Brackets"><a href="#Brackets" class="headerlink" title="Brackets"></a>Brackets</h1><table><thead><tr><th style="text-align:center">Left</th><th style="text-align:center">Tex</th><th style="text-align:center">Right</th><th style="text-align:center">Tex$$</th></tr></thead><tbody><tr><td style="text-align:center">$\lbrace$</td><td style="text-align:center">\lbrace</td><td style="text-align:center">$\rbrace$</td><td style="text-align:center">\rbrace</td></tr><tr><td style="text-align:center">$\langle$</td><td style="text-align:center">\langle</td><td style="text-align:center">$\rangle$</td><td style="text-align:center">\rangle</td></tr><tr><td style="text-align:center">$\lceil$</td><td style="text-align:center">\lceil</td><td style="text-align:center">$\rceil$</td><td style="text-align:center">\rceil</td></tr><tr><td style="text-align:center">$\lfloor$</td><td style="text-align:center">\lfloor</td><td style="text-align:center">$\rfloor$</td><td style="text-align:center">\rfloor</td></tr></tbody></table><h1 id="Fraction-and-Radical-expression"><a href="#Fraction-and-Radical-expression" class="headerlink" title="Fraction and Radical expression"></a>Fraction and Radical expression</h1><p>Similarly, we group numerator and denominator with “{}”, otherwise we only count the first digit or letter.</p><table><thead><tr><th style="text-align:center">Simple form</th><th style="text-align:center">Tex</th><th style="text-align:center">General form</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">$\frac ab$</td><td style="text-align:center">\frac ab</td><td style="text-align:center">$\frac{abc}{def}$</td><td style="text-align:center">\frac{abc}{def}</td></tr></tbody></table><p>Radical:</p><table><thead><tr><th style="text-align:center">Text</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">$\sqrt[2]{2}$</td><td style="text-align:center">\sqrt[2]{2}</td></tr></tbody></table><h1 id="Summation-and-Integral"><a href="#Summation-and-Integral" class="headerlink" title="Summation and Integral"></a>Summation and Integral</h1><table><thead><tr><th style="text-align:center">Text</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">$\sum_1^n$</td><td style="text-align:center">\sum_1^n</td></tr><tr><td style="text-align:center">$\int_1^\infty$</td><td style="text-align:center">\int_1^\infty</td></tr><tr><td style="text-align:center">$\prod_1^n$</td><td style="text-align:center">\prod_1^n</td></tr></tbody></table><h1 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h1><table><thead><tr><th style="text-align:center">Text</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">$\lt$</td><td style="text-align:center">\lt</td></tr><tr><td style="text-align:center">$\gt$</td><td style="text-align:center">\gt</td></tr><tr><td style="text-align:center">$\le$</td><td style="text-align:center">\leq</td></tr><tr><td style="text-align:center">$\geq$</td><td style="text-align:center">\geq</td></tr><tr><td style="text-align:center">$\neq$</td><td style="text-align:center">\neq</td></tr></tbody></table><h1 id="Arithmetic"><a href="#Arithmetic" class="headerlink" title="Arithmetic"></a>Arithmetic</h1><table><thead><tr><th style="text-align:center">Text</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">$\times$</td><td style="text-align:center">\times</td></tr><tr><td style="text-align:center">$\div$</td><td style="text-align:center">\div</td></tr><tr><td style="text-align:center">$\pm$</td><td style="text-align:center">\pm</td></tr><tr><td style="text-align:center">$\mp$</td><td style="text-align:center">\mp</td></tr><tr><td style="text-align:center">$\cdot$</td><td style="text-align:center">\cdot</td></tr><tr><td style="text-align:center">$\approx$</td><td style="text-align:center">\approx</td></tr></tbody></table><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><table><thead><tr><th style="text-align:center">Text</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">$\cup$</td><td style="text-align:center">\cup</td></tr><tr><td style="text-align:center">$\cap$</td><td style="text-align:center">\cap</td></tr><tr><td style="text-align:center">$\setminus$</td><td style="text-align:center">\setminus</td></tr><tr><td style="text-align:center">$\subset$</td><td style="text-align:center">\subset</td></tr><tr><td style="text-align:center">$\subseteq $</td><td style="text-align:center">\subseteq</td></tr><tr><td style="text-align:center">$\subsetneq$</td><td style="text-align:center">\subsetneq</td></tr><tr><td style="text-align:center">$\supset$</td><td style="text-align:center">\supset</td></tr><tr><td style="text-align:center">$\in$</td><td style="text-align:center">\in</td></tr><tr><td style="text-align:center">$\notin$</td><td style="text-align:center">\notin</td></tr></tbody></table><p>Empty set: $\emptyset ​$ , Text: \emptyset</p><h1 id="Combination"><a href="#Combination" class="headerlink" title="Combination"></a>Combination</h1><table><thead><tr><th style="text-align:center">Text</th><th style="text-align:center">Tex</th><th style="text-align:center">Optional</th></tr></thead><tbody><tr><td style="text-align:center">${n+1 \choose 2k}$</td><td style="text-align:center">{n+1 \choose 2k}</td><td style="text-align:center">\binom{n+1}{2k}</td></tr></tbody></table><h1 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h1><table><thead><tr><th style="text-align:center">Text</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">$\to$</td><td style="text-align:center">\rightarrow</td></tr><tr><td style="text-align:center">$\leftarrow$</td><td style="text-align:center">\leftarrow</td></tr><tr><td style="text-align:center">$\Rightarrow$</td><td style="text-align:center">\Rightarrow</td></tr><tr><td style="text-align:center">$\Leftarrow$</td><td style="text-align:center">\Leftarrow</td></tr></tbody></table><h1 id="Logical-operation"><a href="#Logical-operation" class="headerlink" title="Logical operation"></a>Logical operation</h1><table><thead><tr><th style="text-align:center">Text</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">$\land$</td><td style="text-align:center">\land</td></tr><tr><td style="text-align:center">$\lor$</td><td style="text-align:center">\lor</td></tr><tr><td style="text-align:center">$\lnot$</td><td style="text-align:center">\lnot</td></tr><tr><td style="text-align:center">$\forall$</td><td style="text-align:center">\forall</td></tr><tr><td style="text-align:center">$\exists $</td><td style="text-align:center">\exists</td></tr></tbody></table><h1 id="Modular-arithmetic"><a href="#Modular-arithmetic" class="headerlink" title="Modular arithmetic"></a>Modular arithmetic</h1><table><thead><tr><th style="text-align:center">Text</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">$a\equiv b\pmod n$</td><td style="text-align:center">a\equiv b\pmod b</td></tr></tbody></table><h1 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h1><p>Eg1, Tex: <code>\begin {array}{c+|lcr} n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\ \hline 1 &amp; 0.24 &amp; 1 &amp; 125 \\ 2 &amp; -1 &amp; 189 &amp; -8 \\ 3 &amp; -20 &amp; 2000 &amp; 1+10i \end {array}</code></p><p>$$<br>\begin {array} \text{n} &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\<br>1 &amp; 0.24 &amp; 1 &amp; 125 \\<br>2 &amp; -1 &amp; 189 &amp; -8 \\<br>3 &amp; -20 &amp; 2000 &amp; 1+10i<br>\end {array}<br>$$</p><p>Eg2: Tex: <code>\begin {array}{c+|lcr} n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\ \hline 1 &amp; 0.24 &amp; 1 &amp; 125 \\ 2 &amp; -1 &amp; 189 &amp; -8 \\ 3 &amp; -20 &amp; 2000 &amp; 1+10i \end {array}</code></p><p>$$<br>\begin {array}{c+|lcr}<br>n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\<br>\hline 1 &amp; 0.24 &amp; 1 &amp; 125 \\<br>2 &amp; -1 &amp; 189 &amp; -8 \\<br>3 &amp; -20 &amp; 2000 &amp; 1+10i<br>\end {array}<br>$$</p><h1 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h1><h2 id="matrix"><a href="#matrix" class="headerlink" title="matrix"></a>matrix</h2><p> \begin {matrix} 1 &amp; x &amp; x^2 \ 1 &amp; y &amp; y^2 \ 1 &amp; z &amp; z^2 \\ \end{matrix}</p><p>$$<br>\begin {matrix}<br>1 &amp; x &amp; x^2 \\<br>1 &amp; y &amp; y^2 \\<br>1 &amp; z &amp; z^2<br>\end{matrix}<br>$$</p><h2 id="pmatrix"><a href="#pmatrix" class="headerlink" title="pmatrix"></a>pmatrix</h2><p>\begin {pmatrix} 1 &amp; x &amp; x^2 \ 1 &amp; y &amp; y^2 \ 1 &amp; z &amp; z^2 \\ \end{pmatrix}</p><p>$$<br>\begin {pmatrix}<br>1 &amp; x &amp; x^2 \\<br>1 &amp; y &amp; y^2 \\<br>1 &amp; z &amp; z^2<br>\end{pmatrix}<br>$$</p><h2 id="bmatrix"><a href="#bmatrix" class="headerlink" title="bmatrix"></a>bmatrix</h2><p>\begin {bmatrix} 1 &amp; x &amp; x^2 \ 1 &amp; y &amp; y^2 \ 1 &amp; z &amp; z^2 \\ \end{bmatrix}</p><p>$$<br>\begin {bmatrix}<br>1 &amp; x &amp; x^2 \\<br>1 &amp; y &amp; y^2 \\<br>1 &amp; z &amp; z^2<br>\end{bmatrix}<br>$$</p><h2 id="Bmatrix"><a href="#Bmatrix" class="headerlink" title="Bmatrix"></a>Bmatrix</h2><p>\begin {Bmatrix} 1 &amp; x &amp; x^2 \ 1 &amp; y &amp; y^2 \ 1 &amp; z &amp; z^2 \\ \end{Bmatrix}</p><p>$$<br>\begin {Bmatrix}<br>1 &amp; x &amp; x^2 \\<br>1 &amp; y &amp; y^2 \\<br>1 &amp; z &amp; z^2<br>\end{Bmatrix}<br>$$</p><h2 id="vmatrix"><a href="#vmatrix" class="headerlink" title="vmatrix"></a>vmatrix</h2><p> \begin {vmatrix} 1 &amp; x &amp; x^2 \ 1 &amp; y &amp; y^2 \ 1 &amp; z &amp; z^2 \\ \end{vmatrix}</p><p>$$<br>\begin {vmatrix}<br>1 &amp; x &amp; x^2 \\<br>1 &amp; y &amp; y^2 \\<br>1 &amp; z &amp; z^2<br>\end{vmatrix}<br>$$</p><h2 id="Vmatrix"><a href="#Vmatrix" class="headerlink" title="Vmatrix"></a>Vmatrix</h2><p> \begin {Vmatrix} 1 &amp; x &amp; x^2 \ 1 &amp; y &amp; y^2 \ 1 &amp; z &amp; z^2 \\ \end{Vmatrix}</p><p>$$<br>\begin {Vmatrix}<br>1 &amp; x &amp; x^2 \\<br>1 &amp; y &amp; y^2 \\<br>1 &amp; z &amp; z^2<br>\end{Vmatrix}<br>$$</p><h1 id="Reference-Hoocoln"><a href="#Reference-Hoocoln" class="headerlink" title="Reference: Hoocoln"></a>Reference: <a href="http://3iter.com/2015/10/14/Mathjax%E4%B8%8ELaTex%E5%85%AC%E5%BC%8F%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">Hoocoln</a></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MathJax Formula memo.&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="MathJax" scheme="http://yoursite.com/tags/MathJax/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms, Part 1</title>
    <link href="http://yoursite.com/2019/03/10/Algorithms-Part-1/"/>
    <id>http://yoursite.com/2019/03/10/Algorithms-Part-1/</id>
    <published>2019-03-10T19:06:34.000Z</published>
    <updated>2019-03-28T15:25:44.257Z</updated>
    
    <content type="html"><![CDATA[<p>Princeton Algorithm course on coursera. Part 1</p><a id="more"></a><p>Cover:</p><ul><li>Disjoint set</li><li>Analysis of Algorithms</li><li>Stack and Queue</li><li>Elementary Sorts</li><li>Mergesort</li><li>Quicksort</li><li>Priority Queue</li><li>Elementary Symbol Tables</li><li>BST</li><li>Hash Table</li></ul><p>Learning Purpose: </p><ul><li>Being familiar with Java. </li><li>Having fun with algorithms.</li></ul><p>Reference Books:</p><ul><li><a href="https://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener">Algorithms, 4th Edition</a></li><li><a href="https://introcs.cs.princeton.edu/java/home/" target="_blank" rel="noopener">Computer Science:   An Interdisciplinary Approach</a></li></ul><h1 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h1><h2 id="Why-study-algorithms"><a href="#Why-study-algorithms" class="headerlink" title="Why study algorithms"></a>Why study algorithms</h2><p><em>“Great algorithms are the poetry of computation.” — Francis Sullivan</em></p><p><em>“Algorithms + Data Structures = Programs.” — Niklaus Wirth</em></p><h2 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union-Find"></a>Union-Find</h2><p>Steps to developing a usable algorithm</p><ul><li>Model the problem.</li><li><p>Find an algorithm to solve it.</p></li><li><p>Fast enough? Fits in memory?</p></li><li>If not, figure out why.</li><li>Find a way to address the problem.</li><li>Iterate until satisfied.</li></ul><h3 id="dynamic-connectivity"><a href="#dynamic-connectivity" class="headerlink" title="dynamic connectivity"></a>dynamic connectivity</h3><p>Given a set of N objects.</p><ul><li>Union command: connect two objects</li><li>Find/conneted query: is there a path connecting the two objects?</li></ul><center><br>    <img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0w2nx25iwj30jm06yjse.jpg" style="zoom:60%"><br></center><p><u><strong>Connectivity example</strong></u></p><font color="blue">Q. Is there a path connecting <em>p</em> and <em>q</em>?</font><center><br>    <img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0w31l36egj30nt0j2k6w.jpg" style="zoom:60%"><br></center><p>Some common understandings:</p><ul><li>Reflexive: <em>p</em> is connected to <em>p</em> itself.</li><li>Symmetric: if <em>p</em> is connected to <em>q</em>, then <em>q</em> is connected to <em>p</em>.</li><li>Transitive: if <em>p</em> is connected to <em>q</em> and <em>q</em> is connected to <em>r</em>, then <em>p</em> is connected to <em>r</em>.</li></ul><p><strong>Connected components.</strong> Maximal set of objects that are mutually connected.</p><p>e.g.</p><center><br>    <img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0w3d6dfv8j30co09zabx.jpg" style="zoom:60%"><br>    </center><p>​    </p><p><font color="blue"> Goal. </font> Design efficient data structure for union-find.</p><ul><li>Number of objects <em>N</em> can be huge.</li><li>Number of operations <em>M</em> can be huge.</li><li>Find queries and union commands may be intermixed.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line">    UF(<span class="keyword">int</span> N)<span class="comment">// initialize union-find data structure with N objects (0 to N-1)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span><span class="comment">// add connection between p and q</span></span></span><br><span class="line"><span class="function">    <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span><span class="comment">// are p and q the same component?</span></span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span><span class="comment">//component identifier for p (0 to N-1)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span><span class="comment">// number of components</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="quick-find"><a href="#quick-find" class="headerlink" title="quick find"></a>quick find</h3><p>Data structure</p><ul><li>Integer array id[] of size N.</li><li>Interpretation: <em>p</em> and <em>q</em> are connected iff they have the same id.</li></ul><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0xaw2d1qzj30ok03lwfw.jpg" style="zoom:60%"><br></center><p>Find: Check if <em>p</em> and <em>q</em> have the same id</p><p>Union: To merge components containing <em>p</em> and <em>q</em>, change all entries whose id equals id[p] to id[q]. Costly.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFindUF</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickFindUF</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            id[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">return</span> id[p] == id[q]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pid = id[p];</span><br><span class="line">        <span class="keyword">int</span> qid = idp[q];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (id[i] == pid) id[i] = qid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>algorithm</th><th>initialize</th><th>union</th><th>find</th></tr></thead><tbody><tr><td>quick-find</td><td>N</td><td>N</td><td>1</td></tr></tbody></table><p>N union commands on N object: quadratic time. Much too slow.</p><p>Quadratic algorithms don’t scale with technology.</p><h3 id="quick-union"><a href="#quick-union" class="headerlink" title="quick union"></a>quick union</h3><p>Data structure</p><ul><li>Integer array id[] of size N.</li><li>Interpretation: id[i] is parent of i.</li><li>Root of i is id[id[id[…id[i]…]]].</li></ul><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0xbfl4c0kj30au06aaav.jpg" style="zoom:60%"><br></center><p>Each root represents the connected components.</p><p>Find: Check if <em>p</em> and <em>q</em> have the same root.</p><p>Union: To merge components containing <em>p</em> and <em>q</em>, set the id of p’s root to the id of q’s root.</p><p>(path compression)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickUnionUF</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickUnionUF</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)id[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i != id[i])i = id[i];</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root(p) == root(q);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = root(p);</span><br><span class="line">        <span class="keyword">int</span> j = root(q);</span><br><span class="line">        id[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Worst case:</p><table><thead><tr><th>algorithm</th><th>initialize</th><th>union</th><th>find</th></tr></thead><tbody><tr><td>Quick-union</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><p>Quick-union defect</p><ul><li>Trees can get tall</li><li>Find too expensive (could be N array accesses).</li></ul><h3 id="improvements"><a href="#improvements" class="headerlink" title="improvements"></a>improvements</h3><h4 id="Improvement-1-weighting"><a href="#Improvement-1-weighting" class="headerlink" title="Improvement 1: weighting"></a>Improvement 1: weighting</h4><hr><p>Weighted quick-union</p><ul><li>Modify quick-union to avoid tall trees.</li><li>Keep track of size of each tree (number of objects).</li><li>Balance by linking root of smaller tree to root of larger tree.</li></ul><p>Data structure： Same as quick-union, but maintain extra array sz[i] to count number of objects in the tree rooted at i.</p><p>Find: Identical to quick-union. <code>return root(p) == root(q)</code></p><p>Union: Modify quick-union to:</p><ul><li>Link root of samller tree to root of larger tree.</li><li>Update the sz[] array.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = root(p);</span><br><span class="line">itn j = root(q);</span><br><span class="line"><span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (sz[i] &lt; sz[j])&#123; id[i] = j; sz[j] += sz[i]; &#125;</span><br><span class="line"><span class="keyword">else</span>&#123; id[j] = i; sz[i] += sz[j]; &#125;</span><br></pre></td></tr></table></figure><hr><p>Proposition: Depth of any node x is at most  $lg N$</p><table><thead><tr><th>algorithm</th><th>initialize</th><th>union</th><th>find</th></tr></thead><tbody><tr><td>Weighted QU</td><td>N</td><td>lg N</td><td>Lg N</td></tr></tbody></table><h4 id="Improvement-2-path-compression"><a href="#Improvement-2-path-compression" class="headerlink" title="Improvement 2: path compression"></a>Improvement 2: path compression</h4><p>Quick union with path compression: Just after computing the root of p, set the id of each examined node to point to that root.</p><p>Two-pass implementation: add second loop to root() to set the id[] of each examined node to the root.</p><p>Simpler one-pass variant: Make every other node in path point to its grandparent (thereby halving path length).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// variant</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i != id[i])</span><br><span class="line">    &#123;</span><br><span class="line">        id[i] = id[id[i]]</span><br><span class="line">            i = id[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Weighted QU + path compression: worst-case time is N + M lg* N</p><p>(lg * is an iterate function, plz refer to slide for more information)</p><h3 id="applications"><a href="#applications" class="headerlink" title="applications"></a>applications</h3><ul><li>Percolation</li><li>Games (Go, Hex)</li><li>Dynamic connectivity</li><li>Least common ancestor</li><li>Equivalence of finite state automata</li><li>Hoshen-Kopelman algorithm in physics</li><li>Hinley-Milner polymorphic type inference</li><li>Kruskal’s minimum spanning tree algorithm</li><li>Compiling equivalence statements in Fortran</li><li>Morphological attribute openings and closings</li><li><p>Matlab’s <code>bwlabel()</code> function in image processing</p></li><li><p>Subroutine of many other algorithms</p></li></ul><h3 id="Programming-Assignment-1"><a href="#Programming-Assignment-1" class="headerlink" title="Programming Assignment 1"></a>Programming Assignment 1</h3><p>Problem:</p><p><a href="http://coursera.cs.princeton.edu/algs4/assignments/percolation.html" target="_blank" rel="noopener">Programming Assignment 1</a></p><p>Code is on my Github page:</p><p><a href="https://github.com/Aden-Q/Percolation" target="_blank" rel="noopener">Percolation</a></p><p>Missing the optional task of running time analysis, but I don’t want to do it again because this task is somewhat discouraging for some beginners I think.</p><h2 id="Analysis-of-Algorithms"><a href="#Analysis-of-Algorithms" class="headerlink" title="Analysis of Algorithms"></a>Analysis of Algorithms</h2><h3 id="observations"><a href="#observations" class="headerlink" title="observations"></a>observations</h3><p>Analytic Engine</p><p>Reasons to analyze algorithms</p><ul><li>Predict performance</li><li>Compare algorithms</li><li>Provide guarantees</li><li>Understand theoretical basis</li></ul><p>Primary practical reason: avoid performance bugs.</p><p>Discrete Fourier transform</p><p>N-body simulation</p><p>Scientific method</p><ul><li>Observe</li><li>Hypothesize</li><li>Predict</li><li>Verify</li><li>Validate</li></ul><p>Principles</p><ul><li>Experiments must be reproducible</li><li>Hypotheses must be falsifiable</li></ul><p>3-sum problem</p><p>Standard plot on running time</p><p>Log-log scale strategy</p><p>Doubling hypothesis: run program, doubling the size of the input.</p><p>System independent effects</p><ul><li>Algorithm</li><li>Input data</li></ul><p>System dependent effects</p><ul><li>Hardware: CPU, memory, cache</li><li>Software: compiler, interpreter, garbage collector</li><li>System: operating system, network, other apps</li></ul><h3 id="mathematical-models"><a href="#mathematical-models" class="headerlink" title="mathematical models"></a>mathematical models</h3><p>Total running time: sum of cost * frequency for all operations</p><p>General concepts</p><p>1-sum problem</p><p>2-sum problem</p><p>tilde notation</p><p>Estimating a discrete sum</p><h3 id="order-of-growth-classification"><a href="#order-of-growth-classification" class="headerlink" title="order-of-growth classification"></a>order-of-growth classification</h3><p>$1,  log N, N, N lgN, N^2, N^3, 2^N$</p><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0xgesix2pj30xn0m511g.jpg" style="zoom:60%"><br></center><p>Recurence</p><p>Easy concepts</p><h3 id="theory-of-algorithms"><a href="#theory-of-algorithms" class="headerlink" title="theory of algorithms"></a>theory of algorithms</h3><p>Best case: Lower bound on cost</p><ul><li>Determined by “easiest” input</li><li>Provides a goal for all inputs</li></ul><p>Worst case: Upper bound on cost</p><ul><li>Determined by “most difficult” input</li><li>Provides a way to predict performance</li></ul><p>Average case: Expected cost for random input</p><ul><li>Need a model for “random” input</li><li>Provides a way to predict performance</li></ul><p>Actual data</p><ul><li>Need to understand input to effectively process it</li><li>Approach 1: design for the worst case</li><li>Approach 2: randomize, depend on probailistic guarantee</li></ul><p>Goals</p><ul><li>Establish “difficulty” of a problem</li><li>Develop “optimal” algorithms</li></ul><p>Approach</p><ul><li>Suppress details in analyze “to within a constant factor”</li><li>Eliminate variability in input model by focusing on the worst case</li></ul><p>Algorithm design approach</p><hr><p>Start</p><ul><li>Develop an algorithm</li><li>Prove a lower bound</li></ul><p>Gap?</p><ul><li>Lower the upper bound (discover a new algorithm)</li><li>Raise the lower bound (more difficult)</li></ul><h3 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h3><p>Bit</p><p>Byte</p><p>Megabyte (MB)</p><p>Gigabyte (GB)</p><p>Old machine: We used to assume a 32-bit machine with 4 byte pointers</p><p>Modern machine: We now assume a 64-bit machine with 8 byte pointers</p><p>Typical memory usage for objects in Java</p><ul><li>Object overhead: 16 bytes</li><li>Reference: 8 bytes</li><li>Padding: Each object uses a multiple of 8 bytes</li></ul><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0xhbzceq9j310l0ekwl9.jpg" style="zoom:60%"><br></center><h1 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h1><h2 id="Stacks-and-Queues"><a href="#Stacks-and-Queues" class="headerlink" title="Stacks and Queues"></a>Stacks and Queues</h2><p>Fundamental data types.</p><ul><li>Value: collection of objects</li><li>Operations: insert, remove, iterate, test if empty</li><li>Intent is clear when we insert</li><li>Which item do we remove</li></ul><hr><p>Modular programming:</p><p>Seperate interface and implementation</p><p>Benefits.</p><ul><li>Client can’t know details of implementation</li><li>Implementation can’t know details of client needs</li><li>Design: creates modular, reusable libraries</li><li>Performance: useoptimized implementation where it matters</li></ul><h3 id="stacks"><a href="#stacks" class="headerlink" title="stacks"></a>stacks</h3><p>LIFO, examine the item most recently added.</p><p>push, pop</p><p>API.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackOfStrings</span></span>&#123;</span><br><span class="line">    StackOfStrings()<span class="comment">// create an empty stack</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(String item)</span><span class="comment">//insert a new string onto stack</span></span></span><br><span class="line"><span class="function">    String <span class="title">pop</span><span class="params">()</span><span class="comment">// remove and return the string most recently added</span></span></span><br><span class="line"><span class="function">    <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span><span class="comment">// is the stack empty?</span></span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span><span class="comment">// number of strings on the stack</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>Linked-list representation </p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inner class</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    String item;</span><br><span class="line">    Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pop:</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g1a6m19n84j30fk0h6wh8.jpg" style="zoom:60%"><br></center><p>Push:</p><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1a6o6h045j30jr0lhdl9.jpg" style="zoom:60%"><br></center><p>Array implementation</p><hr><ul><li>Use array s[] to store N items on stack.</li><li>push(): add new item at s[N].</li><li>pop(): remove item from s[N-1].</li></ul><p>Defect: Stack overflows when N exceeds capacity.</p><p>Full implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedCapacityStackOfStrings</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] s;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FixedCapacityStackOfStrings</span><span class="params">(<span class="keyword">int</span> capacity)</span></span></span><br><span class="line"><span class="function">    </span>&#123; s = <span class="keyword">new</span> String[capacity]; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> N == <span class="number">0</span>; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String item)</span></span></span><br><span class="line"><span class="function">    </span>&#123; s[N++] = item; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> s[--N]; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stack considerations:</p><p>Overflow and underflow</p><ul><li>Underflow: throw exception if pop from an empty stack.</li><li>Overflow: use resizing array for array implementation.</li></ul><p>Null items: We allow null items to be inserted.</p><p>Loitering: Holding a reference to an object when it is no longer needed.</p><p>To avoid the problem caused by loitering, we need to remove the pointer and free the memory:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the version avoids "loitering" garbage collector can reclaim memory only</span></span><br><span class="line"><span class="comment">// if no outstanding references</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String item = s[--N];</span><br><span class="line">  s[N] = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resizing-arrays"><a href="#resizing-arrays" class="headerlink" title="resizing arrays"></a>resizing arrays</h3><p>Problem. Requiring client to provide capacity does not implement API</p><p>First try:</p><ul><li>push(): increase size of array s[] by 1.</li><li>pop(): decrease size of array s[] by 1.</li></ul><p>Too expensive</p><ul><li>Need to copy all item to a new array.</li><li>Inserting first N items takes time proportional to 1+2+…+N</li></ul><hr><p>Repeated doubling: If the array is full, create a new array of twice the size, and copy items</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ResizingArrayStackOfStrings</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; s = <span class="keyword">new</span> String[<span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (N == s.length) resize(<span class="number">2</span> * s.length);</span><br><span class="line">  s[N++] = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">      String[] copy = <span class="keyword">new</span> String[capacity];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        copy[i] = s[i];</span><br><span class="line">      s = copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Efficient solution for shrinking an array: halve size of array s[] when array is <strong>one-quarter</strong> full.</p><p>Invariant: Array is between 25% and 100% full.</p><p>Amortized analysis: Average running time per operation over a worst-case sequence of operations.</p><p>Proposition: Starting from an empty stack, any sequence of M push and pop operations takes time proportional to M.</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1a85oktmyj30nb0bqwhr.jpg" style="zoom:60%"><br></center><p>Tradeoffs:</p><p>Linked-list implementation</p><ul><li>Every operation takes constant time in the worst case.</li><li>Uses extra time and space to deal with the links.</li></ul><p>Resizing-array implementation.</p><ul><li>Every operation takes constant amortized time.</li><li>Less wasted space.</li></ul><h3 id="queues"><a href="#queues" class="headerlink" title="queues"></a>queues</h3><p>FIFO, examine the item least recently added.</p><p>enqueue, dequeue</p><p>API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueOfStrings</span> </span>&#123;</span><br><span class="line">    QueueOfStrings();<span class="comment">// create an empty queue</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(String item)</span></span>;<span class="comment">// insert a new string onto queue</span></span><br><span class="line">    <span class="function">String <span class="title">dequeue</span><span class="params">()</span></span>;<span class="comment">// remove and return the string least recently added</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">// is the queue empty?</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;<span class="comment">// number of strings on the queue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Linked-list representation</p><hr><p>Maintain pointer to first and last nodes in a linked list;</p><p>Insert/remove from opposite ends</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1a8en2iayj30vt0iutex.jpg" style="zoom:60%"><br></center><p>Enqueue:</p><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1a8gkxa8ij30i90jptdz.jpg" style="zoom:60%"><br></center><p>Array implementation of a queue</p><hr><ul><li>Use array q[] to store items in queue.</li><li>enqueue(): add new item at q[tail].</li><li>dequeue(): remove item from q[head].</li><li>Update head and tail modulo the capacity</li><li>Add resizing array.</li></ul><h3 id="generics"><a href="#generics" class="headerlink" title="generics"></a>generics</h3><p>Java generics</p><ul><li>Avoid casting in client.</li><li>Discover type mismatch errors at compile-time instead of run-time.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Apple&gt; s = <span class="keyword">new</span> Stack&lt;Apple&gt;();</span><br><span class="line">Apple a = <span class="keyword">new</span> Apple();</span><br><span class="line">Orange b = <span class="keyword">new</span> Orange();</span><br><span class="line">s.push(a);</span><br><span class="line">s.push(b);<span class="comment">// compile-time error</span></span><br><span class="line">a = s.pop();</span><br></pre></td></tr></table></figure><p>Guilding principles: Welcome compile-time errors; avoid run-time errors.</p><p>Full implementation (Linked-list version):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">Item</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node first = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">Item item;</span><br><span class="line">  Node next;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123; <span class="keyword">return</span> first == <span class="keyword">null</span>; &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Node oldfirst = first;</span><br><span class="line">    first = <span class="keyword">new</span> Node();</span><br><span class="line">    first.item = item;</span><br><span class="line">    first.next = oldfirst;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Item item = first.item;</span><br><span class="line">    first = first.next;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Wrapper type.</p><ul><li>Each primitive type has a wrapper object type.</li><li>Ex: Integer is wrapper type for int.</li></ul><p>Autoboxing: Automatic case between a primitive type and its wrapper.</p><p>Syntactic sugar: Behind-the-scenes casting.</p><p>Bottom line: Client code can use generic stack for any type of data.</p><h3 id="iterators"><a href="#iterators" class="headerlink" title="iterators"></a>iterators</h3><p>Design challenge: Support iteration over stack items by client, without revealing the internal representation of the stack.</p><p>Java solution: Make stack implement the <strong>Iterable</strong> interface.</p><p>An <strong>Iterable</strong> has a method that returns an <strong>Iterator</strong>.</p><p>Iterable interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function">Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>An <strong>Iterator</strong> has methods <strong>hasNext()</strong> and <strong>next()</strong>.</p><p>Iterator interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Item <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;<span class="comment">// optional</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“foreach” statement:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : stack)</span><br><span class="line">StdOut.println(s);</span><br></pre></td></tr></table></figure><p>Equivalent code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; i = stack.iterator();</span><br><span class="line"><span class="keyword">while</span>(i.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">    String s = i.next();</span><br><span class="line">    StdOut.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example:</p><p>Stack iterator: linked-list implementation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> ListIterator(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Node current = first;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> current != <span class="keyword">null</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123; <span class="comment">/* not supported */</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    Item item = current.item;</span><br><span class="line">    current = current.next;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bag API</p><hr><p>Main application: Adding items to a collection and iterating (when order doesn’t matter).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bag</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">Bag();<span class="comment">// create an empty bag</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Item x)</span></span>;<span class="comment">// insert a new item onto bag</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;<span class="comment">// number of items in bag</span></span><br><span class="line"><span class="function">Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span></span>;<span class="comment">// iterator for all items in bag</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="applications-1"><a href="#applications-1" class="headerlink" title="applications"></a>applications</h3><p>Why not simply use Java collections library?</p><p><strong>“Performance”</strong></p><p>Lesson: Don’t use a library until you understand its API or you can tolerate the defect of the efficiency.</p><p>Stack applications:</p><ul><li>Parsing in a compiler.</li><li>Java virtual machine.</li><li>Undo in a word processor.</li><li>Back button in a Web browser.</li><li>PostScript language for printers</li><li>Implementing function calls in a compiler.</li></ul><p>Dijkstra’s two-stack algorithm:</p><ul><li>Value: push onto the value stack.</li><li>Operator: push onto the operator stack.</li><li>Left parenthesis: ignore.</li><li>Right parenthesis: pop operator and two values; push the result of applying that operator to those values onto the operand stack.</li></ul><h3 id="Programming-Assignment-2"><a href="#Programming-Assignment-2" class="headerlink" title="Programming Assignment 2"></a>Programming Assignment 2</h3><p>Problem:</p><p><a href="http://coursera.cs.princeton.edu/algs4/assignments/queues.html" target="_blank" rel="noopener">Programming Assignment 2</a></p><p>Code is on my Github page:</p><p><a href="https://github.com/Aden-Q/Deques-and-Randomized-Queues" target="_blank" rel="noopener">Kdtree</a></p><p>Missing bonus memory challenge task. (I think it’s easy)</p><h2 id="Elementary-Sorts"><a href="#Elementary-Sorts" class="headerlink" title="Elementary Sorts"></a>Elementary Sorts</h2><h3 id="rules-of-the-game"><a href="#rules-of-the-game" class="headerlink" title="rules of the game"></a>rules of the game</h3><p>Goal: Sort any type of data.</p><p>Q. How can sort() know how to compare data of type Double, String, and java.io.File without any information about the type of an item’s key?</p><p>Callback = reference to executable code.</p><ul><li>Client passes array of objects to sort() function.</li><li>The sort() function calls back object’s compareTo() method as needed.</li></ul><p>Comparable interface (built in to Java)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">Item</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Item that)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> <span class="keyword">implements</span> <span class="title">Compareble</span>&lt;<span class="title">File</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(File b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sort implementation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N = a.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">          <span class="keyword">if</span> (a[j].compareTo(a[j-<span class="number">1</span>]) &lt; <span class="number">0</span>)</span><br><span class="line">              exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Total order</p><hr><p>A total order is a binary relation ≤ that satisfies</p><ul><li>Antisymmetry: if v ≤ w and w ≤ v, then v = w.</li><li>Transitivity: if v ≤ w and w ≤ x, then v ≤ x.</li><li>Totality: either v ≤ w or w ≤ v or both.</li></ul><p>Comparable API</p><hr><p>implement compareTo() so that v.compareTo(w)</p><ul><li>Is a total order.</li><li>Returns a negative integer, zero, or positive integer if v is less than, equal to, or greater than w, repectively.</li><li>Throws an exception if incompatible types (or either is null).</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Date</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Date</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> month, day, year;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> d, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">  month = m;</span><br><span class="line">  day = dl</span><br><span class="line">  year = yl</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Date that)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.year &lt; that.year)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.year &gt; that.year)<span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.month &lt; that.month)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.month &gt; that.month)<span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.day &lt; that.day)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.day &gt; that.day)<span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Two useful sorting abstractions</p><hr><p>Less: Is item v less than w?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p>Exchange: Swap item in array a[] at index i with the one at index j.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Comparable swap = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="selection-sort"><a href="#selection-sort" class="headerlink" title="selection sort"></a>selection sort</h3><p>In iteration i, find index min of smallest remaining entry.</p><p>Swap a[i] and a[min].</p><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1b1eimnf3j30rv08bjux.jpg" style="zoom:60%"><br></center> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; i &lt; N; j++)</span><br><span class="line">            <span class="keyword">if</span> (less(a[j], a[min]))</span><br><span class="line">          min = j;</span><br><span class="line">      exch(a, i, min)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span></span></span><br><span class="line"><span class="function">  </span>&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function">  </span>&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insertion-sort"><a href="#insertion-sort" class="headerlink" title="insertion sort"></a>insertion sort</h3><p>In iteration i, swap a[i] with each larger entry to its left.</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1b1mumo6sj30sj084ad5.jpg" style="zoom:60%"><br></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> N = a.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">              <span class="keyword">if</span> (less(a[j], a[j-<span class="number">1</span>]))</span><br><span class="line">              exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span></span></span><br><span class="line"><span class="function">  </span>&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function">  </span>&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Def: An inversion is a pair of keys that are out of order.</p><p>Def: An array is partially sorted if the number of inversions is ≤ cN.</p><p>Proposition: For partially-sorted arrays, insertion sort runs in linear time.</p><p>Pf: Number of exchanges equals the number of inversions.</p><h3 id="shellsort"><a href="#shellsort" class="headerlink" title="shellsort"></a>shellsort</h3><p>Idea: Move entries more than one position at a time by h-sorting the array.</p><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1b1zwsg9uj30ma065abq.jpg" style="zoom:60%"><br></center><p>How to h-sort an array? Insertion sort, with stride length h.</p><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1b27tqt6mj30st0mj10f.jpg" style="zoom:60%"><br></center><p>Useful in practice:</p><ul><li>Fast unless array size is huge.</li><li>Tiny, fixed footprint for code (used in embedded systems).</li><li>Hardware sort prototype.</li></ul><h3 id="shuffling"><a href="#shuffling" class="headerlink" title="shuffling"></a>shuffling</h3><p>Shuffle sort</p><ul><li>Generate a random real number for each array entry.</li><li>Sort the array.</li></ul><p>Proposition: Shuffle sort produces a uniformly random permutation of the input array, provided no duplicate values.</p><p>Goal: Rearrange array so that result is a uniformly random permutation in linear time.</p><p>Knuth shuffle</p><ul><li>In iteration i, pick integer r between 0 and i uniformly at random.</li><li>Swap a[i] and a[r].</li></ul><p>Proposition: Knuth shuffling algorithm produces a uniformly random permutation of the input array in linear time.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StdRandom</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(Object[] a)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> r = StdRandom.uniform(i + <span class="number">1</span>);<span class="comment">// between 0 and i</span></span><br><span class="line">        exch(a, i, r);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>online poker: easily cracked</p><p>Bottom line: Shuffling a deck of cards is hard!</p><h3 id="convex-hull"><a href="#convex-hull" class="headerlink" title="convex hull"></a>convex hull</h3><p>The convex hull of a set of N points is the smallest perimeter fence enclosing the points.</p><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1b2pp0x4hj30ag098js9.jpg" style="zoom:60%"><br></center><p>Equivalent definitions:</p><ul><li>Smallest convex set containing all the points.</li><li>Smallest area convex polygon enclosing the points.</li><li>Convex polygon enclosing the points, whose vertices are points in set.</li></ul><p>Convex hull output: Sequence of vertices in counterclockwise order.</p><p>Convex hull application: motion planning</p><p>Robot motion planning: Find shortest path in the plane from s to t that avoids a polygonal obstacle.</p><p>Fact: Shortest path is either straight line from s to t or it is one of two polygonal chains of convex hull.</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1b2v8xwxgj30jm09bgo7.jpg" style="zoom:60%"><br></center><p>Farthest pair problem: Given N points in the plane, find a pair of points with the largest Euclidean distance between them.</p><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1b2x5yyapj30au09tgmu.jpg" style="zoom:60%"><br></center><p>Graham scan:</p><ul><li>Choose point p with smallest y-coordinate.</li><li>Sort points by polar angle with p.</li><li>Consider points in order; discard unless it create a ccw turn.</li></ul><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1b33pust5j30j20fdaci.jpg" style="zoom:60%"><br></center><p>Implementation:</p><p>Define a total order, comparing by y-coordinate.</p><p>Define a total order for each point p. (polar angle)</p><p>Computational geometry to determine counterclockwise for triple.</p><p>Mergesort to sort efficiently.</p><p>Implementing ccw:</p><p>CCW: Given three points a, b, and c, is a-&gt;b-&gt;c a counterclockwise turn? (is c to the left of the ray a-&gt;b)</p><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1b3a2cjzjj30b708e751.jpg" style="zoom:60%"><br></center><p>A good strategy involves computing areas (high school compitation knowledge)</p><p>To show respectations:</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1b3eepjljj30qi06g42n.jpg" style="zoom:60%"><br></center><h1 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h1><h2 id="Mergesort"><a href="#Mergesort" class="headerlink" title="Mergesort"></a>Mergesort</h2><h3 id="mergesort"><a href="#mergesort" class="headerlink" title="mergesort"></a>mergesort</h3><p>Basic plan:</p><ul><li>Divide array into two halves.</li><li>Recursively sort each half.</li><li>Merge two halves.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, lo, mid)</span></span>;<span class="comment">// precondition: a[lo...mid] sorted</span></span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, mid+<span class="number">1</span>, hi)</span></span>;<span class="comment">// precondition: a[mid+1...hi] sorted</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++)</span><br><span class="line">        aux[k] = a[k];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = lo, j = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid)a[k] = aux[j++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi)a[k] = aux[i++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i]))a[k] = aux[j++];</span><br><span class="line">        <span class="keyword">else</span>a[k] = aux[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, lo, hi)</span></span>;<span class="comment">// poscondition: a[lo...hi] sorted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Assertion: Statement to test assumptions about your program.</p><ul><li>Helps detect logic bugs.</li><li>Documents code.</li></ul><p>Java assert statement: Throws exception unless boolean condition is true.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, lo, hi)</span></span>;</span><br></pre></td></tr></table></figure><p>Can enable or disable at runtime:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -ea MyProgram<span class="comment">// enable assertions</span></span><br><span class="line">java -da MyProgram<span class="comment">// disable assertions (default)</span></span><br></pre></td></tr></table></figure><p>Best practices: Use assertions to check internal invariants; assume assertions will be disabled in production code.</p><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1c6cuj9zyj30s009f77o.jpg" style="zoom:60%"><br></center><p>Recurrence relation</p><p>Proposition: Mergesort uses extra space proportional to N.</p><p>Pf: The array aux[] needs to be of size N for the last merge.</p><p> Some detailed improvements can be done. </p><h3 id="bottom-up-mergesort"><a href="#bottom-up-mergesort" class="headerlink" title="bottom-up mergesort"></a>bottom-up mergesort</h3><p>Basic plan:</p><ul><li>Pass through array, merging subarrays of size 1.</li><li>Repeat for subarrays of size 2, 4, 8, 16, ……</li></ul><p>Bottom line: No recursion needed!</p><p>Several passes.</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1c6t3ncm3j30pu0ehgsz.jpg" style="zoom:60%"><br></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeBU</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz = sz+sz)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; M - sz; lo += sz+sz)</span><br><span class="line">                merge(a, lo, lo+sz-<span class="number">1</span>, Math.min(lo+sz+sz-<span class="number">1</span>, N-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>log N passes</p><h3 id="sorting-complexity"><a href="#sorting-complexity" class="headerlink" title="sorting complexity"></a>sorting complexity</h3><p>Model of computation: Allowable operations.</p><p>Cost model: Operation count(s).</p><p>Upper bound: Cost guarantee provided by some algorithm for X.</p><p>Lower bound: Proven limit on cost guarantee of all algorithms for X.</p><p>Optimal algorithm: Algorithm with best possible cost guarantee for X.</p><p>Decision tree: please refer to CLRS</p><p>Mergesort is optimal with respect to compares.</p><p>Mergesort is not optimal with respect to space usage.</p><p>Lower bound N log N may not hold if the algorithm has information about:</p><ul><li>The initial order of the input.</li><li>The distribution of key values.</li><li>The representation of the keys.</li></ul><p>Eg:</p><p>Partially-ordered arrays.</p><p>Duplicate keys.</p><p>Digital properties of keys.</p><h3 id="comparators"><a href="#comparators" class="headerlink" title="comparators"></a>comparators</h3><p>Comparable interface: sort using a type’s natural order.</p><p>Comparator interface: sort using an alternate order.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">Key</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">compare</span>(<span class="title">Key</span> <span class="title">v</span>, <span class="title">Key</span> <span class="title">w</span>)// <span class="title">compare</span> <span class="title">keys</span> <span class="title">v</span> <span class="title">and</span> <span class="title">w</span></span></span><br></pre></td></tr></table></figure><p>Required property: Must be a total order.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_NAME = <span class="keyword">new</span> ByName();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_SECTION = <span class="keyword">new</span> BySection();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> section;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByName</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt;</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student v, Student w)</span></span></span><br><span class="line"><span class="function">        </span>&#123; <span class="keyword">return</span> v.name.compareTo(w.name); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BySection</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt;</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student v, Student w)</span></span></span><br><span class="line"><span class="function">        </span>&#123; <span class="keyword">return</span> v.section - w.section; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stability"><a href="#stability" class="headerlink" title="stability"></a>stability</h3><p>Selection/Shell sort are not stable.</p><p>Insertion/Merge sort are stable.</p><p>Long-distance exchange may lead to problems.</p><p>Mergesort is stable because merge is stable.</p><h3 id="Programming-Assignment-3"><a href="#Programming-Assignment-3" class="headerlink" title="Programming Assignment 3"></a>Programming Assignment 3</h3><p>Problem:</p><p><a href="http://coursera.cs.princeton.edu/algs4/assignments/collinear.html" target="_blank" rel="noopener">Programming Assignment 3</a></p><p>Code is on my Github page:</p><p><a href="https://github.com/Aden-Q/Collinear" target="_blank" rel="noopener">Pattern Recognition</a></p><p>Failed some timing tests because HashMap is not allowed.</p><p>Got 92 out of 100.</p><h2 id="Quicksort"><a href="#Quicksort" class="headerlink" title="Quicksort"></a>Quicksort</h2><h3 id="quicksort"><a href="#quicksort" class="headerlink" title="quicksort"></a>quicksort</h3><p>Basic plan:</p><ul><li>Shuffle the array.</li><li>Partition.</li><li>Sort each piece recursively.</li></ul><p>Phase 1: Repeat until i and j pointers cross.</p><ul><li>Scan i from left to right so long as (a[i] &lt; a[lo])</li><li>Scan j from right to left so long as (a[j] &gt; a[lo])</li><li>Exchange a[i] with a[j]</li></ul><p>Phase 2: When pointers cross.</p><ul><li>Exchange a[lo] with a[j]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo, j = hi+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (less(a[++i], a[lo]))</span><br><span class="line">            <span class="keyword">if</span> (i == hi) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (less(a[lo], a[--j]))</span><br><span class="line">            <span class="keyword">if</span> (j == lo) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">        exch(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    exch(a, lo, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        StdRandom.shuffle(a);</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">        sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">        sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Details:</p><ul><li>Partitioning in-place: Can be done with extra memoy.</li><li>Terminating the loop: Testing whether the pointers cross is a bit trickier than it might seem.</li><li>Staying in bounds: The (j == lo) test is redundant because of the key, but (i == hi) test is not.</li><li><p>Preserving randomness: Shuffling is needed for performance guarantee.</p></li><li><p>Equal keys: When duplicates are present, it is bettuer to stop on keys equal to the partitioning item’s key.</p></li></ul><p>Best case: N log N</p><p>Worst case: $N^2$</p><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1d8shuq7hj30wn0ludp8.jpg" style="zoom:60%"><br></center><p>Approximate sum by an integral.</p><p>Proposition: Quicksort is an in-place sorting algorithm, not stable.</p><p>Pf:</p><ul><li>Partitioning: constant extra space.</li><li>Depth of recursion: logarithmic extra space (with high probability).</li></ul><p>Insertion sort small subarrays:</p><ul><li>Even quicksort has too much overhead for tiny subarrays.</li><li>Cutoff to insertion sort for around 10 items.</li><li>Note: could delay insertion sort until one pass at end.</li></ul><p>Practical improvements:</p><p>Insertion sort small subarrays:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo + CUTOFF - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Insertion.sort(a, lo, hi);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">    sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">    sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Median of sample:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> m = medianOf3(a, lo, lo + (hi -lo)/<span class="number">2</span>, hi);</span><br><span class="line">    swap(a, lo, m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">    sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">    sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="selection"><a href="#selection" class="headerlink" title="selection"></a>selection</h3><p>Goal: Given an array of N items, find the kth largest.</p><p>Applications:</p><ul><li>Order statistics.</li><li>Find the “top k.”</li></ul><p>Quick-select:</p><hr><p>Partition array so that:</p><ul><li>Entry a[j] is in place.</li><li>No larger entry to the left of j.</li><li>No smaller entry to the right of j.</li></ul><p>Repeat in one subarray, depending on j; finished when j equals k.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title">select</span><span class="params">(Comparable[] a, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StdRandom.shuffle(a);</span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>; hi = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (hi &gt; lo)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">        <span class="keyword">if</span> (j &lt; k) lo = j + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; k)hi = j - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span><span class="keyword">return</span> a[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Proposition: Quick-select takes linear time on average.</p><p>Remard: Quadratic time in the worst case while random shuffle provides a probabilistic guarantee.</p><h3 id="duplicate-keys"><a href="#duplicate-keys" class="headerlink" title="duplicate keys"></a>duplicate keys</h3><p>Quicksort with duplicate keys: Algorithm goes quadratic unless partitioning stops on equal keys!</p><p>3-way partitioning:</p><p>Goal: Partition array into 3 parts so that:</p><ul><li>Entries between lt and gt equal to partition item v.</li><li>No larger entries to left of lt.</li><li>No smaller entries to right of gt.</li></ul><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1d9kvv8aqj30ee06lt9f.jpg" style="zoom:60%"><br></center><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1d9nf4f8qj30f505m3z1.jpg" style="zoom:60%"><br></center><p>Bottom line: Randomized quicksort with 3-way partitioning reduces running time from linearithmic to linear in broad class of applications.</p><h3 id="system-sorts"><a href="#system-sorts" class="headerlink" title="system sorts"></a>system sorts</h3><p>Java system sorts:</p><p>Arrays.sort()</p><ul><li>Has different method for each primitive type.</li><li>Has a method for data types that implement Comparable.</li><li>Has a method that uses a Comparator.</li><li>Uses tuned quicksort for primitive types; tuned mergesort for objects.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String[] a = StdIn.readStrings();</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            StdOut.println(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Choices:</p><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1da8hsgkuj30sc0h7jza.jpg" style="zoom:60%"><br></center><h1 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h1><h2 id="Priority-Queues"><a href="#Priority-Queues" class="headerlink" title="Priority Queues"></a>Priority Queues</h2><h3 id="API-and-elementary-implementations"><a href="#API-and-elementary-implementations" class="headerlink" title="API and elementary implementations"></a>API and elementary implementations</h3><p>Collections: Insert and delete items.</p><ul><li>Stack: Remove the item most recently added.</li><li>Queue: Remove the item least recently added.</li><li>Randomized queue: Remove a random item.</li><li>Priority queue: Remove the largest (or smallest) item.</li></ul><p>Priority queue API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">MaxPQ();<span class="comment">// create an empty priority queue</span></span><br><span class="line">MaxPQ(Key[] a);<span class="comment">// create a priority with given keys</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key v)</span></span>;<span class="comment">// insert a key into the priority queue</span></span><br><span class="line"><span class="function">Key <span class="title">delMax</span><span class="params">()</span></span>;<span class="comment">// return and remove the largest key</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">// is the priority queue empty?</span></span><br><span class="line"><span class="function">Key <span class="title">max</span><span class="params">()</span></span>;<span class="comment">// return the largest key</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;<span class="comment">// number of entries in the priority queue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Applications:</p><ul><li>Event-driven simulation</li><li>Numerical computation</li><li>Data compression</li><li>Graph searching</li><li>Number theory</li><li>Artificial intelligence</li><li>Statistics</li><li>Operating systems</li><li>Discrete optimization</li><li>Spam filtering</li></ul><p>Generalizes: stack, queue, randomized queue.</p><p>Unordered array implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnorderedMaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Key[] pq;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnorderedMaxPQ</span><span class="params">(<span class="keyword">int</span> capacity)</span></span></span><br><span class="line"><span class="function"></span>&#123; pq = (Key[]) <span class="keyword">new</span> Comparable[capacity]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> N == <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key x)</span></span></span><br><span class="line"><span class="function"></span>&#123; pq[N++] = x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">    <span class="keyword">if</span> (less(max, i)) max = i;</span><br><span class="line">    exch(max, N-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> pq[--N];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>implementation</th><th>insert</th><th>delmax</th><th>max</th></tr></thead><tbody><tr><td>unordered array</td><td>1</td><td>N</td><td>N</td></tr><tr><td>ordered array</td><td>N</td><td>1</td><td>1</td></tr><tr><td>Goal</td><td>log N</td><td>log N</td><td>log N</td></tr></tbody></table><h3 id="binary-heaps"><a href="#binary-heaps" class="headerlink" title="binary heaps"></a>binary heaps</h3><p>Based on complete binary tree (Perfectly balanced, except for bottom level).</p><p>Binary heap: Array representation of a heap-ordered complete binary tree.</p><p>Heap-ordered binary tree:</p><ul><li>Keys in nodes.</li><li><p>Parent’s key no smaller than children’s key.</p><p>Array representation:</p></li><li><p>Indices start at 1. (Start at 0 causes a little trouble)</p></li><li>Take nodes in level order.</li><li>No explicit liniks needed!</li></ul><p>Proposition: Largest key is a[1], which is root of binary tree.</p><p>Proposition: Can use array indices to move through tree.</p><ul><li>Parent of node at k is at k/2.</li><li>Children of node at k are at 2k and 2k+1.</li></ul><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1dnzpm3q4j30dw0dagom.jpg" style="zoom:60%"><br></center><p>Swim:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k/<span class="number">2</span>, k))</span><br><span class="line">    &#123;</span><br><span class="line">        exch(k, k/<span class="number">2</span>);</span><br><span class="line">        k = k/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Insertion:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pq[++N] = x;</span><br><span class="line">    swim(N);<span class="comment">// swim means swim up</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1do64ok5pj30cb0h90wm.jpg" style="zoom:60%"><br></center><p>Sink:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span>*k &lt;= N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; N &amp;&amp; less(j, j+<span class="number">1</span>)) j++;</span><br><span class="line">        <span class="keyword">if</span> (!less(k, j)) <span class="keyword">break</span>;</span><br><span class="line">        exch(k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Delete max:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Key max = pq[<span class="number">1</span>];</span><br><span class="line">    exch(<span class="number">1</span>, N--);</span><br><span class="line">    sink(<span class="number">1</span>);</span><br><span class="line">    pq[N+<span class="number">1</span>] = <span class="keyword">null</span>;<span class="comment">// prevent loitering</span></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1dog1bzv3j30dv0hd0xg.jpg" style="zoom:60%"><br></center><p>Complete Java implementation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Key[] pq;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(<span class="keyword">int</span> capacity)</span></span></span><br><span class="line"><span class="function"></span>&#123; pq = (Key[]) <span class="keyword">new</span> Comparable[capacity+<span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> N == <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delMax</span><span class="params">()</span></span>;</span><br><span class="line">&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> pq[i].compareTo(pq[j]) &lt; <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123; Key t = pq[i]; pq[i] = pq[j]; pq[j] = t; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Improvements: Fibonacci heap</p><p>Some considerations</p><hr><p>Immutability of keys:</p><ul><li>Assumption: client does not change keys while they’re on the PQ.</li><li>Best practice: use immutable keys.</li></ul><p>Underflow and overflow:</p><ul><li>Underflow: throw exception if deleting from empty PQ.</li><li>Overflow: add no-arg constructor and use resizing array.</li></ul><p>Minimum-oriented priority queue:</p><ul><li>Replace less() with greater().</li><li>Implement greater().</li></ul><p>Other operations:</p><ul><li>Remove an arbitrary item.</li><li>Change the priority of an item.</li></ul><p>Immutability:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span>[] data;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">double</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.N = data.length;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="keyword">double</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            <span class="keyword">this</span>.data[i] = data[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Immutable: String, Integer, Double, Color, Vector, Transaction, Point2D.</p><p>Mutable: StringBuilder, Stack, Counter, Java array.</p><p>Advantages of immutability:</p><ul><li>Simplifies debugging.</li><li>Safer in presence of hostile code.</li><li>Simplifiers concurrent programming.</li><li>Safe to use as key in priority queue or symbol table.</li></ul><p>Disadvantage: Must create new object for each data type value.</p><h3 id="heapsort"><a href="#heapsort" class="headerlink" title="heapsort"></a>heapsort</h3><p>Basic plan for in-place sort:</p><ul><li>Create max-heap with all N keys.</li><li>Repeatedly remove the maximum key.</li></ul><p>Heap construction: Sink, bottom-up.</p><p>Build:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = N/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">    sink(a, k, N);</span><br></pre></td></tr></table></figure><p>Sort:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (N &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    exch(a, <span class="number">1</span>, N--);</span><br><span class="line">    sink(a, <span class="number">1</span>, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bottom line: </p><ul><li>Inner loop longer than quicksort’s</li><li>Makes poor use of cache memory</li><li>Not stable</li></ul><h3 id="event-driven-simulation"><a href="#event-driven-simulation" class="headerlink" title="event-driven simulation"></a>event-driven simulation</h3><p>Molecular dynamics simulation of hard discs</p><hr><p>Goal. Simulate the motion of N moving particles that behave according to the laws of elastic collision.</p><p>Time-driven simulation: Judge collision with dt</p><p>Event-driven simulation: Maintain PQ of collision events, prioritized by time.</p><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1entk93myj30pa067tbf.jpg" style="zoom:60%"><br></center><p>Collision prediction: Given position, velocity, and radius of a particle, when will it collide next with a wall or another particle?</p><p>Collision resolution: If collision occurs, update colliding particle(s) according to laws of elastic collisions.</p><p>Difficult simulation, involving a lot of physics and math, or at least not easy.</p><h3 id="Programming-Assignment-4"><a href="#Programming-Assignment-4" class="headerlink" title="Programming Assignment 4"></a>Programming Assignment 4</h3><p>Problem:</p><p><a href="http://coursera.cs.princeton.edu/algs4/assignments/8puzzle.html" target="_blank" rel="noopener">Programming Assignment 4</a></p><p>Code is on my Github page:</p><p><a href="https://github.com/Aden-Q/8-Puzzle" target="_blank" rel="noopener">8 Puzzle</a></p><p>Failed some timing tests.</p><p>Got 96 out of 100.</p><h2 id="Symbol-Tables"><a href="#Symbol-Tables" class="headerlink" title="Symbol Tables"></a>Symbol Tables</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>Key-value pair abstraction:</p><ul><li>Insert a value with specified key.</li><li>Given a key, search for the corresponding value.</li></ul><p>Associative array abstraction: Associate one value with each key.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    ST();<span class="comment">// create a symbol table</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span></span>;<span class="comment">// put key-value pair into the table (remove key from table if value is null)</span></span><br><span class="line">    <span class="function">Value <span class="title">get</span><span class="params">(Key key)</span></span>;<span class="comment">// value paired with key (null if key is absent)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span>;<span class="comment">// remove key (and its value) from table</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span></span>;<span class="comment">// is there a value paired with key?</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">// is the table empty?</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;<span class="comment">// number of key-value pairs in the table</span></span><br><span class="line">    <span class="function">Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span></span>;<span class="comment">// all the keys in the table</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Convetions:</p><ul><li>Value are not null.</li><li>Method get() returns null if key not present.</li><li>Method put() overwrites old value with new value.</li></ul><p>Contains:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> get(key) != <span class="keyword">null</span>; &#125;</span><br></pre></td></tr></table></figure><p>Lazy delete:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span>&#123; put(key, <span class="keyword">null</span>); &#125;</span><br></pre></td></tr></table></figure><p>Keys and values</p><hr><p>Value type: Any generic type.</p><p>Key type: several natural assumptions:</p><ul><li>Assume keys are Comparable, use compareTo().</li><li>Assume keys are any generic type, use equals() to test equality.</li><li>Assume keys are any generic type, use equals() to test equality; use hashCode() to scramble key.</li></ul><p>Best practices: Use immutable types for symbol table keys.</p><p>Equality test:</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Date</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> day;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> year;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="keyword">this</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (y == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (y.getClass() != <span class="keyword">this</span>.getClass())</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    Date that = (Date) y;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.day != that.day)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.month != that.month)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.year != that.year)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="elementary-implementations"><a href="#elementary-implementations" class="headerlink" title="elementary implementations"></a>elementary implementations</h3><p>Sequential search in a linked list:</p><hr><p>Data structure: Maintain an (unordered) linked list of key-value pairs.</p><p>Search: Scan through all keys until find a match.</p><p>Insert: Scan through all keys until find a match; if no match add to front.</p><p>Binary search in an ordered array:</p><hr><p>Data structure: Maintain an ordered array of key-value pairs.</p><p>Rank helper function: How many keys &lt; k?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty())<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> i = rank(key);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; N &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>)<span class="keyword">return</span> vals[i];</span><br><span class="line">    <span class="keyword">else</span><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>; hi = N-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(keys[mid]);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) hi = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) lo = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span><span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1fnwacsmmj30wu0cpgqz.jpg" style="zoom:60%"><br></center><h3 id="ordered-operations"><a href="#ordered-operations" class="headerlink" title="ordered operations"></a>ordered operations</h3><p>API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;, <span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">ST();<span class="comment">// create an ordered symbol table</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span></span>;<span class="comment">// put key-value pair into the table (remove key from table if value is null)</span></span><br><span class="line"><span class="function">Value <span class="title">get</span><span class="params">(Key key)</span></span>;<span class="comment">// value paired with key (null if key is absent)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span>;<span class="comment">// remove key (and its value) from table</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span></span>;<span class="comment">// is there a value paired with key?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">// is the table empty?</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;<span class="comment">// number of key-value pairs</span></span><br><span class="line"><span class="function">Key <span class="title">min</span><span class="params">()</span></span>;<span class="comment">// smallest key</span></span><br><span class="line"><span class="function">Key <span class="title">max</span><span class="params">()</span></span>;<span class="comment">// largest key</span></span><br><span class="line"><span class="function">Key <span class="title">floor</span><span class="params">(Key key)</span></span>;<span class="comment">// smallest key less than or equal to key</span></span><br><span class="line"><span class="function">Key <span class="title">ceiling</span><span class="params">(Key key)</span></span>;<span class="comment">// smallest key greater than or equal to key</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span></span>;<span class="comment">// number of keys less than key</span></span><br><span class="line"><span class="function">Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> k)</span></span>;<span class="comment">// key of rank k</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span></span>;<span class="comment">// delete smallest key</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteMax</span><span class="params">()</span></span>;<span class="comment">// delete largest key</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">(Key lo, Key hi)</span></span>;<span class="comment">// number of keys in [lo..hi]</span></span><br><span class="line"><span class="function">Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span></span>;<span class="comment">// keys in [lo..hi], in sorted order</span></span><br><span class="line"><span class="function">Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span></span>;<span class="comment">// all keys in the table, in sorted order</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Binary-Search-Trees"><a href="#Binary-Search-Trees" class="headerlink" title="Binary Search Trees"></a>Binary Search Trees</h2><h3 id="BSTs"><a href="#BSTs" class="headerlink" title="BSTs"></a>BSTs</h3><p>Definition: A BST is binary tree in symmetric order.</p><p>A binary tree is either:</p><ul><li>Empty</li><li>Two disjoint binary trees (left and right).</li></ul><p>Symmetric order: Each node has a key, and every node’s key is: </p><ul><li>Larger than all keys in its left subtree.</li><li>Smaller than all keys in its right subtree.</li></ul><p>Java definition: A BST is a reference to a root Node.</p><p>A Node is comprised of four fields:</p><ul><li>A Key and a Value.</li><li>A reference to the left and right subtree.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key key;</span><br><span class="line">    <span class="keyword">private</span> Value val;</span><br><span class="line">    <span class="keyword">private</span> Node left, right;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1fzf22o39j30fl0a4wh7.jpg" style="zoom:60%"><br></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;, <span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123; <span class="comment">/* see previous slide */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* see later */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* see later */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* see later */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* see later */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Search: If less, go left; if greater, go right; if equal, search hit.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node x = root;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)x = x.left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)x = x.right;</span><br><span class="line">        <span class="keyword">else</span><span class="keyword">return</span> x.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Insertion (concise but tricky recursive code):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span></span></span><br><span class="line"><span class="function"></span>&#123; root = put(root, key, val); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, Key key, Value val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">new</span> Node(key, val);</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)x.left = put(x.left, key, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)x.right = put(x.right, key, val);</span><br><span class="line">    <span class="keyword">else</span>x.val = val;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ordered-operations-1"><a href="#ordered-operations-1" class="headerlink" title="ordered operations"></a>ordered operations</h3><p>Minimum: Smallest key in table.</p><p>Maximum: Largest key in table.</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1g00rztt2j30iu0a8gnd.jpg" style="zoom:60%"><br></center><p>Rank: How many keys &lt; k?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> rank(key, root); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key, Node x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)<span class="keyword">return</span> rank(key,x.left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span> + size(x.left) + rank(key, x.right);</span><br><span class="line">    <span class="keyword">else</span><span class="keyword">return</span> size(x.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Inorder traversal:</p><ul><li>Traverse left subtree.</li><li>Enqueue key.</li><li>Traverse right subtree.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    Queue&lt;Key&gt; q = <span class="keyword">new</span> Queue&lt;Key&gt;();</span><br><span class="line">    inorder(root, q);</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(Node x, Queue&lt;Key&gt; q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>)<span class="keyword">return</span>;</span><br><span class="line">    inorder(x.left, q);</span><br><span class="line">    q.enqueue(x.key);</span><br><span class="line">    inorder(x.right, q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="deletion"><a href="#deletion" class="headerlink" title="deletion"></a>deletion</h3><p>Lazy deletion:</p><ul><li>Set its value to null.</li><li>Leave key in tree to guide searches (but don’t consider it equal in search).</li></ul><p>Delete the minimum key:</p><ul><li>Go left until finding a node with a null left link.</li><li>Replace that node by its right link.</li><li>Update subtree counts.</li></ul><p>Else, Hibbard deletion, please refer to CLRS BST chapter for more details</p><h1 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h1><h2 id="Balanced-Search-Trees"><a href="#Balanced-Search-Trees" class="headerlink" title="Balanced Search Trees"></a>Balanced Search Trees</h2><h3 id="2-3-search-trees"><a href="#2-3-search-trees" class="headerlink" title="2-3 search trees"></a>2-3 search trees</h3><p>Allow 1 or 2 keys per node</p><ul><li>2-node: one key, two children</li><li>3-node: two keys, three children</li></ul><p>Perfect balance: Every path from root to null link has same length</p><p>Symmetric order: Inorder traversal yields keys in ascending order</p><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0yd3afksej30ka0bsgov.jpg" style="zoom:60%"><br></center><p>Search</p><ul><li>Compare search key against keys in node</li><li>Find interval containing search key</li><li>Follow associated link (recursively)</li></ul><p>Insert into a 2-node at bottom</p><ul><li>Search for key, as usual</li><li>Replace 2-node with 3-node</li></ul><p>Splitting a 4-node is a local transformation: constant number of operations</p><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0yde48g5vj30nb0gdgs4.jpg" style="zoom:60%"><br></center><p>Invariants: Maintain symmetric order and perfect balance</p><p>Pf: Each transformation maintains symmetric order and perfect balance</p><p>Tree height: Always $lg N$</p><h3 id="red-black-BSTs"><a href="#red-black-BSTs" class="headerlink" title="red-black BSTs"></a>red-black BSTs</h3><p>Left-leaning RB tree</p><p>Idea:</p><ul><li>Represent 2-3 tree as a BST</li><li>Use “internal” left-leaning links as “glue” for 3-nodes</li></ul><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g0ydp9v9ckj30sj06wmzw.jpg" style="zoom:60%"><br></center><p>A BST such that:</p><ul><li>No node has two red links connected to it</li><li>Every path from root to null link has the same number of black links</li><li>Red links lean left</li></ul><p>2-3 tree and RB BST are coresponding as following:</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0ydtk0xlaj30ge0h478m.jpg" style="zoom:60%"><br></center><p>Search for red-black BST is the same as the general BST</p><p>Representation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    Key key;</span><br><span class="line">    Value val;</span><br><span class="line">    Node left, right;</span><br><span class="line">    <span class="keyword">boolean</span> color;<span class="comment">// color of parent link</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(Node x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> x.color == RED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Left rotation: Orient a (temporarily) right-leaning red link to lean left</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateLedt</span><span class="params">(Node h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.right)</span></span>;</span><br><span class="line">    Node x = h.right;</span><br><span class="line">    h.right = x.left;</span><br><span class="line">    x.left = h;</span><br><span class="line">    x.color = h.color;</span><br><span class="line">    h.color = RED;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Invariants: Maintains symmetric order and perfect black balance</p><p>Right rotation is similar.</p><hr><p>Color flip: Recolor to split a (temporary) 4-node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flipColors</span><span class="params">(Node h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> !isRed(h);</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.left)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.right)</span></span>;</span><br><span class="line">    h.color = RED;</span><br><span class="line">    h.left.color = Black;</span><br><span class="line">    h.right.color = Black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Insertion in a LLRB tree</p><p>Basic strategy: Maintain 1-1 correspondence with 2-3 trees by applying elementary red-black BST operations</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0yebsxcraj30dz0esact.jpg" style="zoom:60%"><br></center><p>Warmup 1: Insert into a tree with exactly 1 node</p><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0yeeyme4uj30ln0av795.jpg" style="zoom:60%"><br></center><p>Warmup 2: Insert into a tree with exactly 2 nodes (3 cases)</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0yej8db99j30ue0i1qc8.jpg" style="zoom:60%"><br></center><p>Case 2: Insert into a 3-node at the bottom</p><ul><li>Do standard BST insert; color new link red</li><li>Rotate to balance the 4-node (if needed)</li><li>Flip colors to pass red link up one level</li><li>Rotate to make lean left (if needed)</li><li>Repeat case 1 or case 2 up the tree (if needed)</li></ul><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0yenl6vckj30vo0d8443.jpg" style="zoom:60%"><br></center><p>Java implementation</p><p>Reduce one case to another</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node h, Key key, Value val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, RED);</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(h.key);</span><br><span class="line">    <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>) h.left = put(h.left, key, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cmp &gt; <span class="number">0</span>) h.right = put(h.right, key, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp == <span class="number">0</span>) h.val = val;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right) &amp;&amp; !isRed(h.left))h = rotateLeft(h;</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left))h = rotateRight(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.right))flipColors(h);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> h;                                                              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-trees-Bayer-McCreight-1972"><a href="#B-trees-Bayer-McCreight-1972" class="headerlink" title="B-trees (Bayer-McCreight, 1972)"></a>B-trees (Bayer-McCreight, 1972)</h3><p>File system model:</p><ul><li>Page: Contiguous block of data</li><li>Probe: First access to a page</li><li>Property: Time required for a probe is much larger than time to access data within a page</li><li>Cost model: Number of probes</li><li>Goal: Access data using minimum number of probes</li></ul><p>B-tree: Generalize 2-3 trees by allowing up to M-1 key-link pairs per node</p><ul><li>At least 2 key-link pairs at root</li><li>At least M/2 key-link pairs in other nodes</li><li>External nodes contain client keys</li><li>Internal nodes contain copies of keys to guide search</li></ul><p>Searching in a B-tree:</p><ul><li>Start at root</li><li>Find interval for search key and take corresponding link</li><li>Search terminates in external node</li></ul><p>Insertion in a B-tree:</p><ul><li>Search for new key</li><li>Insert at bottom</li><li>Split nodes with M key-link pairs on the way up the tree</li></ul><p>Red-black trees are widely used as system symbol tables</p><ul><li>Java: java.util.TreeMap, java.util.TreeSet</li><li>C++ STL: map, multimap, multiset</li><li>Linux kernel: completely fair scheduler, linux/rbtree.h</li><li>Emacs: conservative stack scanning</li></ul><p>B-tree variants: B+ tree, B* tree, B# tree, …</p><p>B-trees (and variants) are videly used for file systems and databases</p><ul><li>Windows: NTFS</li><li>Mac: HFS, HFS+</li><li>Linux: ReiserFS, XFS, Ext3FS, JFS</li><li>Databases: Oracle, DB2, Ingres, SQL, PostgreSQL</li></ul><h2 id="Geometric-Applications-of-BSTs"><a href="#Geometric-Applications-of-BSTs" class="headerlink" title="Geometric Applications of BSTs"></a>Geometric Applications of BSTs</h2><p>Applications: CAD, games, movies, virtual reality, databases, …</p><h3 id="1d-range-search"><a href="#1d-range-search" class="headerlink" title="1d range search"></a>1d range search</h3><ul><li>Insert key-value pair</li><li>Search for key k</li><li>Delete key k</li><li>Range search: find all keys between $k_1$ and $k_2$</li><li>Range count: number of keys between $k_1$ and $k_2$</li></ul><hr><p>Implementations:</p><table><thead><tr><th>data structure</th><th>insert</th><th>range count</th><th>range search</th></tr></thead><tbody><tr><td>unordered array</td><td>1</td><td>N</td><td>N</td></tr><tr><td>ordered array</td><td>N</td><td>log N</td><td>R + log N</td></tr><tr><td>goal</td><td>log N</td><td>log N</td><td>R + log N</td></tr></tbody></table><p>N = number of keys</p><p>R = number of keys that match</p><p>BST implementation:</p><p>Proposition: Running time proportional to log N.</p><p>Pf: Nodes examined = search path to lo + search path to hi.</p><h3 id="line-segment-intersection"><a href="#line-segment-intersection" class="headerlink" title="line segment intersection"></a>line segment intersection</h3><p>Orthogonal line segment intersection search</p><p>Quadratic algorithm: Check all pairs of line segments for intersection.</p><p>Nondegeneracy assumption: All x- and y- coordinates are distinct.</p><p>Sweep-line algorithm:</p><p>Sweep vertical line from left to right</p><ul><li>X-coordinates define events.</li><li>H-segment (left endpoint): insert y-coordinate into BST.</li><li>H-segment (right endpoint): remove y-coordinate from BST.</li><li>When hit a vertical line segment, do a 1-d search</li></ul><p>Proposition: The sweep-line algorithm takes time proportional to N log N + R to find all R intersections among N orthogonal line segments.</p><p>Pf.</p><ul><li>Put x-coordinates on a PQ (or sort).    N log N</li><li>Insert y-coordinates into BST  N log N</li><li>Delete y-coordinates from BST  N log N</li><li>Range searches in BST  N log N + R</li></ul><p>Bottom line: Sweep line reduces 2d orthogonal line segment intersection search to 1d range search</p><h3 id="kd-trees"><a href="#kd-trees" class="headerlink" title="kd trees"></a>kd trees</h3><p>Extension of ordered symbol-table to 2d keys</p><ul><li>Insert a 2d key</li><li>Delete a 2d key</li><li>Search for a 2d key</li><li>Range search: find all keys that lie in a 2d range</li><li>Range count: number of keys that lie in a 2d range</li></ul><p>Geometric interpretation:</p><ul><li>Keys are point in the plane</li><li>Find/count points in a given h-v rectangle</li></ul><hr><p>Grid implementation:</p><ul><li>Divide space into M-by-M grid of squares</li><li>Create list of points contained in each square</li><li>Use 2d array to directly index relevant square</li><li>Insert: add(x, y) to list for corresponding square</li><li>Range search: examine only squares that intersect 2d range query</li></ul><p>Space-time tradeoff</p><ul><li>Space: $M^2+N$</li><li>Time: 1 + $N/M^2$ per square examined, on average</li></ul><p>Choose grid square size to tune performance</p><ul><li>Too small: waste space</li><li>Too large: too many points per square</li></ul><p>It’s fast, simple solution for evenly-distributed points</p><p>Problem: Clustering a well-knwon phenomenon in geometric data</p><ul><li>Lists are too long, even though average length is short</li><li>Need data structure that adapts gracefully to data</li></ul><hr><p>2d tree construction</p><p>Recursively partition plane into two halfplanes.</p><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g13eil2g5ij30fc0itdib.jpg" style="zoom:60%"><br></center><p>Data structure: BST, but alternate using x- and y- coordinates as key.</p><ul><li>Search gives rectangle containing point</li><li>Insert further subdivides the plane</li></ul><p>Range search in a 2d tree</p><p>Goal: Find all points in a query axis-aligned rectangle.</p><ul><li>Check if point in node lies in given rectangle</li><li>Recursively search left/bottom (if any could fall in rectangle)</li><li>Recursively search right/top (if any could fall in rectangle)</li></ul><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g13et5rhmvj30xj0em0x2.jpg" style="zoom:60%"><br></center><p>Nearest neighbor search in a 2d tree</p><p>Goal: Find closest point to query point</p><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g13es1t253j30xm0ey0wn.jpg" style="zoom:60%"><br></center><ul><li>Check distance from point in node to query point</li><li>Recursively search left/bottom (if it could contain a closer point)</li><li>Recursively search right/top (if it could contain a closer point)</li><li>Organize method so that it begins by searching for query point</li></ul><hr><p>Kd tree</p><p>Recursively partition k-dimensional space into 2 halfspaces</p><p>Efficient, simple data structure for processing k-dimensional data</p><ul><li>Widely used</li><li>Apapts well to high-dimensional and clustered data</li><li>Discovered by an undergrad in an algorithms class!</li></ul><hr><p>N-body simulation</p><ul><li>Build 3d-tree with N particles sa nodes</li><li>Store center-of-mass of subtree in each node.</li><li>To compute total force acting on a particle, traverse tree, but stop as soon as distance from particle to subdivision is sufficiently large.</li></ul><h3 id="interval-search-trees"><a href="#interval-search-trees" class="headerlink" title="interval search trees"></a>interval search trees</h3><p>1d interval search: Data structure to hold set of (overlapping) intervals</p><ul><li>Insert an interval (lo, hi).</li><li>Search for an interval (lo, hi).</li><li>Delete an interval (lo, hi).</li><li>Interval intersection query: given an interval (lo, hi), find all intervals (or one interval) in data structure that intersects (lo, hi).</li></ul><p>API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntervalST</span></span></span><br><span class="line"><span class="class">    <span class="title">IntervalST</span>()</span></span><br><span class="line"><span class="class">    <span class="title">void</span> <span class="title">put</span>(<span class="title">Key</span> <span class="title">lo</span>, <span class="title">Key</span> <span class="title">hi</span>, <span class="title">Value</span> <span class="title">val</span>)</span></span><br><span class="line"><span class="class">    <span class="title">Value</span> <span class="title">get</span>(<span class="title">Key</span> <span class="title">lo</span>, <span class="title">Key</span> <span class="title">hi</span>)</span></span><br><span class="line"><span class="class">    <span class="title">void</span> <span class="title">delete</span>(<span class="title">Key</span> <span class="title">lo</span>, <span class="title">Key</span> <span class="title">hi</span>)</span></span><br><span class="line"><span class="class">    <span class="title">Iterable</span>&lt;<span class="title">Value</span>&gt; <span class="title">intersects</span>(<span class="title">Key</span> <span class="title">lo</span>, <span class="title">Key</span> <span class="title">hi</span>)</span></span><br></pre></td></tr></table></figure><p>Interval search trees</p><p>Create BST, where each node stores an interval (lo, hi).</p><ul><li>Use left endpoint as BST key.</li><li>Store max endpoint in subtree rooted at node.</li></ul><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g13friuhaaj30o90duq6b.jpg" style="zoom:60%"><br></center><p>To insert an interval (lo, hi):</p><ul><li>Insert into BST, using lo as the key.</li><li>Update max in each node on search path.</li></ul><p>To search for any one interval that intersects query interval (lo, hi):</p><ul><li>If interval in node intersects query interval, return it.</li><li>Else if left subtree is null, go right.</li><li>Else if max endpoint in left subtree is less than lo, go right.</li><li>Else go left.</li></ul><p>Case 1. If search goes right, then no intersection in left.</p><p>Case 2. If search goes left, then there is either an intersection in left subtree or no intersections in either</p><p>Pf. Suppose no intersection in left.</p><ul><li>Since went left, we have lo ≤ max.</li><li>Then for any interval (a,b) in right subtree of x, hi &lt; c ≤ a, no intersection in right.</li></ul><h3 id="rectangle-intersection"><a href="#rectangle-intersection" class="headerlink" title="rectangle intersection"></a>rectangle intersection</h3><p>Orthogonal rectangle intersection search</p><p>Goal: Find all intersections among a set of N orthogonal rectangles</p><p>Quadratic algorithm: Check all pairs of rectangles for intersection</p><p>Non-degeneracy assumption: All x- and y- coordinates are distinct.</p><p>Design-rule checking:</p><ul><li>Certain wires cannot intersect</li><li>Certain spacing needed between different types of wires</li><li>Debugging = orthogonal rectangle intersection search</li></ul><p>Sweep-line algorithm (similar to previous one)</p><ul><li>X-coordinates of left and right endpoints define events.</li><li>Maintain set of rectangles that intersect the sweep line in an interval search tree (using y-intervals of rectangle).</li><li>Left endpoint: interval search for y-interval of rectangle; insert y-interval.</li><li>Right endpoint: remove y-interval.</li></ul><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g13gi5ehrlj30vf0dojtf.jpg" style="zoom:60%"><br></center><p>Bottom line: Sweep line reduces 2d orthogonal rectangle intersection search to 1d interval search.</p><h3 id="Summary-Of-Geometric-Applications-of-BSTs"><a href="#Summary-Of-Geometric-Applications-of-BSTs" class="headerlink" title="Summary Of Geometric Applications of BSTs"></a>Summary Of Geometric Applications of BSTs</h3><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g13glc65gbj30we0pewlm.jpg" style="zoom:60%"><br></center><h3 id="Programming-Assignment-5"><a href="#Programming-Assignment-5" class="headerlink" title="Programming Assignment 5"></a>Programming Assignment 5</h3><p>Problem:</p><p><a href="http://coursera.cs.princeton.edu/algs4/assignments/kdtree.html" target="_blank" rel="noopener">Programming Assignment 5</a></p><p>Code is on my Github page:</p><p><a href="https://github.com/Aden-Q/kd-tree" target="_blank" rel="noopener">Kdtree</a></p><p>Missing the optional task of running time analysis because it’s optional.</p><h1 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6"></a>Week 6</h1><h2 id="Hash-Tables"><a href="#Hash-Tables" class="headerlink" title="Hash Tables"></a>Hash Tables</h2><h3 id="hash-functions"><a href="#hash-functions" class="headerlink" title="hash functions"></a>hash functions</h3><p>Basic plan: save items in a key-indexed table (index is a function of the key).</p><p>Hash function: Method for computing array index from key.</p><p><code>hash(&quot;it&quot;) = 3</code></p><p>Issues:</p><ul><li>Computing the hash function.</li><li>Equality test.</li><li>Collision resolution.</li></ul><p>Classic space-time tradeoff.</p><ul><li>No space limitation: trivial hash function with key as index.</li><li>No time limitation: trivial collision resolution with sequential search.</li><li>Space and time limitations: hashing (the real world).</li></ul><p>Hash function</p><hr><p>Idealistic goal: Scramble the keys uniformly to produce a table index.</p><ul><li>Efficiently computable.</li><li>Each table index equally likely for each key.</li></ul><p>All Java classes inherit a method hashCode(), which returns a 32-bit int.</p><p>Default implementation: Memory address of x.</p><p>Some typicals in Java libraries:</p><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1g164xduhj30zg0mb11h.jpg" style="zoom:60%"><br></center><p> Hash for strings: Horner’s method</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span>[] s;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash;</span><br><span class="line">    <span class="keyword">if</span> (h != <span class="number">0</span>)<span class="keyword">return</span> h;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length(); i++)</span><br><span class="line">    h = s[i] + (<span class="number">31</span> * h);</span><br><span class="line">    hash = h;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Modular hashing</p><p>Hash code: A int between $-2^{32}$ and $2^{31}-1$</p><p>Hash function: An int between 0 and M-1 (for use as array index).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// to be between 0 and M-1</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key key)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> (key.hashCode() &amp; <span class="number">0x7fffffff</span>) % M; &#125;</span><br></pre></td></tr></table></figure><p>Assumption</p><p>Uniform hashing assumption: Each key is equally likely to hash to an integer between 0 and M-1.</p><h3 id="seperate-chaining"><a href="#seperate-chaining" class="headerlink" title="seperate chaining"></a>seperate chaining</h3><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1g1ngvns8j30kx0f4whb.jpg" style="zoom:60%"><br></center><p>Typical choice of M: near N / 5</p><h3 id="linear-probing"><a href="#linear-probing" class="headerlink" title="linear probing"></a>linear probing</h3><p>Open addressing (IBM 1953): When a new key collides, find next empty slot, and put it there.</p><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1g1v6g6iaj30dr0gbgnk.jpg" style="zoom:60%"><br></center><p>Hash: Map key to integer i between 0 and M-1.</p><p>Insert: Put at table index i if free; if not try i+1, i+2, etc.</p><p>Search: Search table index i; if occupied but no match, try i+1, i+2, etc.</p><p>Note: Array size M must be greater than number of key-value pairs N.</p><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p>Algorithmic complexity attack.</p><p>One-way hash function: “Hard” to find a key that will hash to a desired value.</p><p>Separate chaining vs. linear probing</p><hr><p>Separate chaining:</p><ul><li>Easier to implement delete.</li><li>Performance degrades gracefully.</li><li>Clustering less sensitive to poorly-designed hash function.</li></ul><p>Linear probing:</p><ul><li>Less wasted space.</li><li>Better cache performance.</li></ul><p>Variations:</p><ul><li>Two-probe hashing</li><li>Double hashing</li><li>Cuckoo hashing</li><li>And so on…</li></ul><h2 id="Symbol-Table-Applications"><a href="#Symbol-Table-Applications" class="headerlink" title="Symbol Table Applications"></a>Symbol Table Applications</h2><h3 id="sets"><a href="#sets" class="headerlink" title="sets"></a>sets</h3><p>Mathematical set: A collection of distinct keys.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SET</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">SET();<span class="comment">// create an empty set</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Key key)</span></span>;<span class="comment">// add the key to the set</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span></span>;<span class="comment">// is the key in the set?</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Key key)</span></span>;<span class="comment">// remove the key from the set</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;<span class="comment">// return the number of keys in the set</span></span><br><span class="line"><span class="function">Iterator&lt;Key&gt; <span class="title">iterator</span><span class="params">()</span></span>;<span class="comment">// iterator through keys in the set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Exception filter:</p><ul><li>Read in a list of words from one file.</li><li>Print out all words from standard input that are { in, not in } the list.</li></ul><h3 id="dictionary-clients"><a href="#dictionary-clients" class="headerlink" title="dictionary clients"></a>dictionary clients</h3><p>Dictionary lookup.</p><h3 id="indexing-clients"><a href="#indexing-clients" class="headerlink" title="indexing clients"></a>indexing clients</h3><p>File indexing</p><hr><p>Goal: Given a list of files specified, create an index so that you can efficiently find all files containing a given query string.</p><p>Key: String.</p><p>Value: Set of files.</p><p>Concordance</p><hr><p>Goal: Preprocess a text corpus to support concordance queries: given a word, find all occurrences with their immediate contexts.</p><h3 id="sparse-vectors"><a href="#sparse-vectors" class="headerlink" title="sparse vectors"></a>sparse vectors</h3><center><br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1g1g3ffe3xzj30hw086jta.jpg" style="zoom:60%"><br></center><p>Problem: Sparse matrix-vector multiplication.</p><p>Vector representations</p><hr><p>1 D array representation:</p><ul><li>Constant time access to elements.</li><li>Space proportional to N.</li></ul><center><br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1g3gd9fznj30u103qwfy.jpg" style="zoom:60%"><br></center><p>Symbol table representation:</p><ul><li>Key = index, value = entry.</li><li>Efficient iterator.</li><li>Space proportional to number of nonzeros.</li></ul><center><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g1g3ge1nh0j30fp05nwf9.jpg" style="zoom:60%"><br></center><p>Sparse matrix representation: Each row of matrix is a sparse vector.</p><ul><li>Efficient access to elements.</li><li>Space proportional to number of nonzeros (plus N).</li></ul><center><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1g3m3lj45j30ek0c2ad6.jpg" style="zoom:60%"><br></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">SparseVector[] a = <span class="keyword">new</span> SparseVector[N];</span><br><span class="line"><span class="keyword">double</span>[] x = <span class="keyword">new</span> <span class="keyword">double</span>[N];</span><br><span class="line"><span class="keyword">double</span>[] b = <span class="keyword">new</span> <span class="keyword">double</span>[N];</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Initialize a[] and x[]</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    b[i] = a[i].dot(x);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Princeton Algorithm course on coursera. Part 1&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
      <category term="Programming" scheme="http://yoursite.com/tags/Programming/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
