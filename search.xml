<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <url>%2F2018%2F11%2F24%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[正则表达式菜鸟教程Regular expression正则表达式是一种文本模式，包括普通字符和特殊字符(也称为元字符)。正则表达式使用单个字符来描述、匹配一系列匹配某个句法规则的字符串。 在练Codewars的时候，意识到了正则表达式的重要性，尤其是在字符串处理方面。另外正则表达式在Linux文件操作上也比较重要。 之前多多少少接触过一点，但是也意识到了他的复杂性。如果说shell编程那一套是鬼画符，那么这个应该也是差不多的。 但是正则表达式在某些情况下真的特别好用(听说学会正则表达式还能提升成就感)，于是就下定决心入这个坑了。 简介?通配符匹配文件名中的0个或1个字符，而*通配符匹配0个或多个字符。相比于通配符，正则表达式功能更强大，而且更加灵活。实例： 1^[0-9]+abc$ 说明： ^匹配输入字符串的开始位置 [0-9]+匹配多个数字，[0-9]匹配单个，+匹配一个或多个 abc$匹配字母abc并以abc结尾，$表示输入字符串的结束位置 为什么要用正则表达式？ 测试字符串内的模式。称为数据验证 替换文本。使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本来替换他 基于模式匹配从字符串中提取子字符串 发展历史： 可以追溯到对人类神经系统如何工作的早期研究，科学家提出数学的方式描述神经网络。后来有科学家发表神经网络方面的文章正式提出了正则表达式的概念。 应用领域： 目前，正则表达式在众多软件中得到广泛应用，包括*nix(Linux, Unix等)、HP操作系统、PHP、C#、Java开发环境 语法正则表达式描述了一种字符串匹配的模式(pattern)，可以用来检查一个串中是否含有某种子串、将匹配的子串替换或者从某个串中提取出符合某个条件的子串等。 正则表达式的组件可以是单个字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合 普通字符： 没有显式指定为元字符的所有可打印和不可打印字符。包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。 非打印字符： \cx: 匹配由x指明的控制字符 \f: 匹配一个换页符，等价于\x0c和\cL \n: 匹配一个换行符，等价于\x0a和\cJ \r: 匹配匹配一个回车符，等价于\x0d和\cM \s: 匹配任何空白字符，包括空格、制表符、换页符等等 \S: 匹配任何非空白字符 \t: 匹配一个制表符，等价于\x09和\cl \v: 匹配一个垂直制表符，等价于\x0b和\cK 特殊字符： 如果要匹配特殊字符，要进行转义 $: 匹配输入字符串的结尾位置 (): 标记一个子表达式的开始和结束位置 *: 匹配前面的子表达式零次或多次 +: 匹配前面的子表达式一次或多次 .: 匹配除换行符之外的任何单字符 [: 标记一个中括号表达式的开始 ?: 匹配前面的子表达式零次或一次 \: 将下一个字符标记为特殊字符 ^: 匹配输入表达式的开始位置 {: 标记限定表达式的开始 |: 指明两项之间的一个选择 限定符： 指定正则表达式的一个给定组件必须出现多少次才能满足匹配 *: 匹配前面的子表达式零次或多次 +: 匹配前面的子表达式一次或多次 ?: 匹配前面的子表达式零次或一次 {n}: n是一个非负整数，匹配确定的n次。例如’o{2}’用来匹配两个o {n,}: n是一个非负整数，至少匹配n次，例如’o{2,}’用来匹配两个或多个o {n,m}: m和n均为非负整数，最少匹配n次且最多匹配m次，例如’o{1,3}’匹配1-3个o 实例： 以章节号为例： 12345678//任何位数的章节标题/chapter [1-9][0-9]*///匹配0-99章/chapter [0-9]&#123;1,2&#125;///匹配1-99章/chapter [1-9][0-9]?/ 定位符： 定位符能够将正则表达式固定到行首或行尾，定位符用来描述字符串或单词的边界 ^: 匹配输入字符串开始的位置 $: 匹配输入字符串结尾的位置 \b: 匹配一个单词边界，即字与空格间的位置 B: 非单词边界匹配 限定符和定位符不能一起用 选择： 用圆括号将所有选择项括起来 反向引用： 不太明白 元字符 \: 将下一个字符标记为特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符 ^: 匹配输入字符串的开始位置 $: 匹配输入字符串的结束位置 *: 匹配前面的子表达式零次或多次 +: 匹配前面的子表达式一次或多次 ?: 匹配前面的子表达式零次或一次 {n}: n是一个非负整数，匹配确定的n次 {n,}: n是一个非负整数，至少匹配n次 {n,m}: 至少匹配n次，最多m次 .: 匹配换行符\n \r之外的任何单个字符 (pattern): 匹配pattern并获取这一匹配 (?:pattern): 非获取匹配 (?=pattern): 正向匹配预查 (?!pattern): 正向否定预查 (?&lt;=pattern): 反向肯定预查 (?&lt;!pattern): 反向否定预查 x|y: 匹配x或y [xyz]: 字符集合，匹配所包含的任意一个字符 [^xyz]: 负值字符集合，匹配未包含的任意单个字符 [a-z]: 字符范围，匹配指定范围内的任意字符 [^a-z]: 负值字符范围，匹配任何不在指定范围内的任意字符 \b: 匹配一个单词边界，也就是单词和空格间的位置 \B: 匹配非单词边界 \cx: 匹配由x指明的控制字符 \d: 匹配一个数字字符，等价于[0-9] \D: 匹配一个非数字字符，等价于[^0-9] \f: 匹配一个换页符 \n: 匹配一个换行符 \r: 匹配一个回车符 \s: 匹配任何空白字符，包括空白、制表符、换页符等 \S: 匹配任何非空白字符 \t: 匹配一个制表符 \v: 匹配一个垂直制表符 \w: 匹配字母、数字、下划线。等价于[A-Za-z0-9_] \W: 匹配非字母、数字、下划线。等价于[^A-Za-z0-9_] \xn: 匹配n，其中n为十六进制转义值 \num: 匹配num，其中num是一个正整数 \nm: 标志一个八进制转义值或向后引用 \un: 匹配n，n是一个用四个十六进制数字表示的Unicode字符 运算符优先级从左到右计算，并遵循运算符优先级 优先级由高到低： \: 转义符 (),(?:),(?=),[]: 圆括号和方括号 *,+,?,{n},{n,},{n,m}: 限定符 ^,$,\,任何元字符，任何字符: 定位点和序列 |: 替换 匹配规则基本模式匹配 模式是正则表达式最基本的元素，是一组描述字符串特征的字符。 1^once 这个模式包含^，表示字符串开头，用来匹配那些以once为开头的字符串 1bucket$ 这个模式包含$，表示字符串结尾，用来匹配以bucket为结尾的字符串 1^bucket$ 表示只匹配bucket 字符簇： 1[AaEeIiOoUu] 确定重复出现： {x}的意思是前面的字符或字符簇只出现x次，{x,}的意思是前面的内容出现x或更多的次数，{x,y}表示前面的内容至少出现x次，至多出现y次。特殊字符*和{0,}是等价的，+和{1,}是等价的。 示例简单表达式： 1/a7M/ 匹配a7M 字符匹配： 12/a.7//filename\.txt/ 中括号表达式： 创建匹配字符组的一个列表 12/Chapter [12345]//Chapter [1-5]/ 中括号表达式的典型应用是指定任何大写或小写字母或数字匹配： 1/[A-Za-z0-9]/ 实验楼正则表达式基础grep, expr, sed, awk或vi中会经常用到正则表达式 正则表达式的特殊符号： [:alnum:]: 代表英文大小写字母和数字 [:alpha:]: 代表英文大小写字母 [:blank:]: 代表空格和tab键 [:cntrl:]: 代表键盘上的控制按键，如CR,LF,TAB,DEL [:digit:]: 代表数字 [:graph:]: 代表空白字符以外的其他 [:lower:]: 代表小写字母 [:print:]: 代表可以被打印出来的任何字符 [:punct:]: 代表标点符号 [:upper:]: 代表大写字母 [:space:]: 代表会产生空白的字符如空格，tab，CR等 [:xdigt:]: 代表十六进制数字类型 在使用正则表达式时需要留意语系，不同语系同一模式匹配结果可能有差异 通过grep命令使用正则表达式grep参数 -a: 将binary档案以text档案的形式搜索 -c: 计算找到“搜索字符串”的次数 -i: 忽略大小写，所以大小写视为相同 -n: 顺便输出行号 -v: 反向选择，即输出不包含搜索字符串的内容 []中包含的字符，只能是一个，-用来表示字符范围，[^…]排除型字符组，跟反向选择是一样的。例如： [abc]: 表示a或b或c [0-9]: 表示0-9中任意一个数字，等价于0123456789 [^a1&lt;]: 表示除a，1，&lt;外的任意一个字符 [^a-z]: 表示除小写字母外的任意一个字符 行首行尾控制，例如： ^[A-Z]: 表示以大写字母开头 $[A-Z]: 表示以大写字母结尾 重复次数控制： {}可以用来限定字符重复出现的次数 {n}: 表示只匹配n次 {n,}: 表示至少匹配n次 {n,m}: 表示至少匹配n次，至多匹配m次 通过sed命令使用正则表达式sed是非交互式编辑器。它不会修改文件。sed编辑器逐行处理文件，并将结果发送到屏幕。处理过程为：把当前正在处理的行保存到一个临时缓冲区中（也称为模式空间），然后处理临时缓冲区中的行，完成后发送到屏幕上，sed每处理好一行就把它从临时缓冲区中删除，然后读入下一行，进行处理和显示。处理完最后一行后，sed就结束运行。 1nl regular_express.txt | sed '2,5d' 2,5表示2到5行，d表示删除 1nl regular_express.txt | sed '2,$d' 删除2到最后一行 1sed -i '1d' regular_express 在源文件中删除第一行 扩展正则表达式知识点:egrep命令 可以使用grep -E 来使用扩展正则表达式，效果和egrep相同 挑战 找到登录shell为bash的用户: 1grep -n 'bash' user 找到UID或GID是5位数或以上的用户行记录 1grep -n '[0-9]\&#123;5,\&#125;' user 有主目录在/var/spo??l下的用户，但想不起来spo后面到底有几个o，找出满足条件的用户行记录 1grep -n '/var/spo\+l' user 已知有个用户其用户名形如 ‘mi..M’，中间有未知多个mi，找出该用户的用户行记录 1grep -n '[mi]\+M' user 至于输出到文件，简单重定向就完事了]]></content>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F10%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
